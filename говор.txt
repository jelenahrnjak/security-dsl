1.

Корисници веб апликација често нису свесни колико
личних података оне прикупљају, обрађују и
складиште. Неовлашћен приступ тим подацима могао
би да доведе до злоупотребе и нарушавања
приватности корисника. Стога, обезбеђивање високог
нивоа безбедносни представља важан део развоја веб
апликација.
Безбедност у веб апликацијама представља скуп мера
и механизама који су примењени како би се корисници,
систем и подаци заштитили од различитих видова
напада, злоупотреба и крађа. Имплементација жељеног
нивоа аутентификације и ауторизације, као два
основна концепта у области безбедности, представља
основу ефикасне заштите. Аутентификација
представља процес потврђивања идентитета
корисника или ентитета који приступа систему.
Ауторизација се односни на контролу приступа
одређеним ресурсима или функционалностима
система.

Java је објектно-оријентисан програмски језик, а
платформска независност, једноставност и објектна
оријентисаност су особине које чине овај језик једним
од најпопуларнијих [1]. Радни оквир Spring чини развој
серверског дела веб апликација у програмском језику
Java бржим, једноставнијим и сигурнијим што га чини
најпопуларнијим радним оквиром за ову намену [2].

2. 
Међутим, обезбеђивање одговарајуће заштите за
апликације у радном оквиру Spring представља сложен
и временски захтеван процес, те је самим тим
подложан грешкама. С обзиром да се безбедносни
аспекти изнова конфигуришу при почетној
имплементацији сваке апликације, овакав посао
постаје и репетативан.
Са циљем уклањања наведених недостатака, тежи се
оптимизацији и аутоматизацији развоја безбедних веб
апликација. Једно од могућих решења представља
аутоматско генерисање почетне Spring веб апликације
са конфигурисаним безбедносним аспектима које се
врши на основу параметара које корисник унесе, а који
дефинишу основне карактеристике апликације и
њених елемената.
За постизање овог циља креиран је наменски језик
Secura Domain-Specific Language (securaDSL) за
моделовање Spring веб апликација уз генераторе који на основу модела генеришу извршиви код написан у
програмском језику Java и радног оквира Spring.
Користећи језик securaDSL, експерти у пољу
безбедносних конфигурација могу брзо и једноставно
да дефинишу параметре апликација и конфигуришу
различите безбедносне механизме помоћу синтаксе
која им је лако читљива. Имплементација сигурних веб
апликација на овај начин постаје једноставнија и
ефикаснија, а уједно се смањује могућност грешака у процесу развоја.

3.
Развој софтвера вођен моделима (енгл. Model-Driven
Software Development) је методологија у којој модел
представља централну тачку у процесу развоја
софтвера. Сваки модел се креира помоћу неког језика
за моделовање. Језици за моделовање обухватају
апстрактну и конкретну синтаксу, као и семантику.
Апстрактна синтакса дефинише структуру језика и
начин на који се различити концепти могу
комбиновати без обзира на репрезентацију [3].
Конкретна синтакса, која може бити текстуална или
графичка, описује специфичну репрезентацију језика
за моделовање [3]. Семантика језика за моделовање
описује значења и ограничења дефинисаних концепата
помоћу којих се креирају модели, те самим тим и
модели имају јасно дефинисану семантику.
Наменски језици, познати и као језици специфични за
домен (енгл. Domain-Specific Languages), представљају
језике за моделовање који су уско специјализовани и
пројектовани за специфичан домен, контекст или
компанију. Језик securaDSL представља наменски
језик јер је пројектован и прилагођен домену
безбедносних конфигурација Spring веб апликација.
Трансформације модела су битан корак при развоју
софтвера вођеним моделом и подразумевају
аутоматско генерисање циљног модела или текста на
основу изворног модела. У оквиру овог рада
имплементиране су трансформације модела у текст,
који представља извршиви код веб апликације.

4.
Код који се генерише написан је у програмском језику
Java коришћењем радног оквира Spring. 
Подржана су три релациона система за управљање
базама података: PostgreSQL, MySQL и Oracle
Database. 
Радни оквир Spring пружа могућност безбедносне
конфигурације веб апликација помоћу библиотеке
Spring Security. Конфигурација се врши у складу са
различитим безбедносним механизмима и на
различитим нивоима, а конфигурацију је потребно
прилагодити специфичним потребама система.
Подржана су три безбедносна механизма: основна
аутентификација, стандард JSON веб токен и стандард
Оpen Authorization.
3.1 Основна аутентификација
Основна аутентификација (енгл. Basic Authentication)
представља метод у ком се корисник идентификује
помоћу корисничког имена и лозинке. При сваком
захтеву се у заглављу захтева налазе идентификациони
параметри корисника и на основу тога се потврђује
идентитет и право приступа ресурсу или
функционалности система. Овај метод се једноставно
имплементира и користи, те је погодан за
једноставније системе. Лозинке преносе у заглављу
захтева, што их чини подложним нападима и може
угрозити сигурност апликације, па се самим тим
препоручује коришћење додатних безбедносних
механизама.
3.2 Стандард JSON веб токен
JSON веб токен (енгл. JSON web token, JWT)
представља формат за представу токена за
аутентификацију. Састоји се од три дела: заглавље
(енгл. header), главног дела (енгл. payload) и потписа
(енгл. signature). Токен се генерише при свакој
успешној аутентификацији и додељује се пријављеном
кориснику, при чему садржи све неопходне податке о
њему. При сваком захтеву се проверава валидност JWT
токена на основу информација из њега и одређује се да
ли је кориснику дозвољен приступ ресурсу или
функционалности система.
3.3 Стандард Open Authorization
Стандард Open Authorization (OAuth) представља
стандард за доделу права приступа који омогућава
корисницима да доделе овлашћењa апликацијама за
приступ њиховим подацима који се налазе у другим
апликацијама. Уместо уношења идентификационих
параметара, сервер за доделу права приступа генерише
токен који се користи за приступ ресурсима
апликације. Овај стандард користи велики број
компанија кaо што су Google и Facebook, како би
омогућиле корисницима да поделе податке са својихкорисничких налога са другим апликацијама.
Последња верзија овог механизма је OAuth2.0.

5.
Апстрактна синтакса омогућава опис структуре
наменског језика securaDSL и представљена је помоћу
мета-модела (Слика 4.1). Коренски концепт апстрактне
синтаксе је апликација (Application) и садржи податке
неопходне за њену иницијализацију. Могуће је
подесити параметре за повезивање са базом података
(Database), а поред тога, могу се дефинисати ентитети
(Entity) који одговарају табелама у бази података.
Описани су ентитети који се односе на кориснике
(User) и улоге (Role). При дефинисању ентитета,
неопходно је навести обележја (Attribute) за сваки
ентитет. За концепт који се односи на обраду захтева
корисника (Controller) је могуће додати методе
(Endpoint) које се односе на различите
функционалности апликације. Навођењем инстанци
улога (RoleInstance) које се налазе у систему и
повезивањем са одређеним методама омогућена је
контрола приступа. Контролер за аутентификацију
(Authentication) може да садржи методе за
регистрацију, пријаву на систем и одјаву са система.
Посебан део апстрактне синтаксе односи се на
сигурносни слој (Security), где су подржана три
безбедносна механизма: основна аутентификација
(BasicAuthentication), стандард JWT (JWT) и OAuth2.0
(OAuth2). У зависности од жељеног механизма могу се
дефинисати додатни параметри описани адекватним
концептима.
Сваки од наведених концепата може се додати или
изоставити у зависности од потреба корисника.

6. и 7.
Коришћењем радног оквира Xtext, на основу метамодела генерисана је почетна верзија текстуалне
конкретне синтаксе. Ова граматика прилагођена је
домену како би била лако читљива и интуитивна за
развојне тимове којима је securaDSL намењен. Почетна
верзија граматике подсећа на уобичајене синтаксе за
дефинисање разних конфигурационих фајлова, те
таква граматика не захтева велике измене узимајући у
обзир да циљну групу чине експерти у пољу
безбедносне конфигурације. 

8.
С обзиром да се Spring апликација може поделити у
целине које су претходно описане и да постоји више
подржаних безбедносних механизама, ради
прегледности развијено је више генератора. Развијени
су следећи генератори: генератор статичких датотека,
генератор општих конфигурационих фајлова,
генератор слоја који моделује податке из базе
података, генератор слоја за обраду захтева корисника
и генератори конфигурационих фајлова за основну
аутентификацију, стандард JWT и стандард OAuth2.0.
Генератори формирају излаз на основу података из
модела описаног помоћу наменског језика securaDSL,
чиме се генерише извршиви код за Spring веб
апликацију са конфигурисаним одабраним
безбедносним механизмом. Који генератори ће
генерисати излазни код зависи од тога који су
концепти дефинисани у моделу. Нпр. уколико је
дефинисана основна аутентификација, генератори
конфигурационих фајлова за стандарде JWT и
OAuth2.0 неће имати излаз.

Генерисане апликације тестиране су помоћу алата Postman и на сликама су приказани захтеви и одговори на захтеве. 

9.
Наменски језик securaDSL описан у овом раду садржи
концепте неопходне за моделовање Spring апликација,
а додатно подржава конфигурацију три безбедносна
механизма: основне аутентификациjе, JWT и OAuth2.0.
Поред наменског језика, описани су генератори који су
развијени у циљу генерисања извршивог кода на
основу модела креираног помоћу језика securaDSL.
Коришћење наменског језика за моделовање Spring веб
апликација са конфигурисаним безбедносним
аспектима и пропратних генератора значајно убрзава
процес развоја софтвера и умањује могућност грешке
која настаје при ручном писању кода. Постојање
модела апликације помаже у уочавању делова које
захтевају измену, а које би иначе изазвале дораду која
би утицала на велики број линија кода и самим тим
довела до грешака које се тешко идентификују и
отклањају. Структура саме апликације је видљивија и
подложнија дискусији унутар развојног тима.
Аутоматско генерисање кода повећава ефикасност и
доприноси конзистентности, што унапређује квалитет
саме апликације.
Остављен је простор за проширење тренутног начина
за моделовање и генератора за безбедносни механизам
OAuth 2.0 увођењем регистрације на систем. Могуће је
увести подршку за додатне безбедносне механизме,
друге програмске језике и радне оквире увођењем
нових концепата. Ово би захтевало измену апстрактне
и конкретне синтаксе, али и развој нових генератора
који би креирали код у различитим програмским
језицима. Оваква унапређења би допринела значају и
примени наменског језика securaDSL и развијених
генератора.