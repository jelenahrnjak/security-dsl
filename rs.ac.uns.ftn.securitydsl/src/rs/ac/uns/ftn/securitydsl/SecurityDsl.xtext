// automatically generated by Xtext
grammar rs.ac.uns.ftn.securitydsl.SecurityDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/security_dsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Application returns Application:
	{Application}
	'Application'
	name=EString
	'{'
		('description' description=EString)?
		('group' group=EString)?
		('artifact' artifact=EString)?
		('packageName' packageName=EString)?
		('port' port=ELongObject)?
		('hostname' hostname=EString)?
		('app_database' app_database=Database)?
		('app_models' '{' app_models+=Model ( "," app_models+=Model)* '}' )?
		('app_controllers' '{' app_controllers+=Controller ( "," app_controllers+=Controller)* '}' )?
		('app_security' app_security=Security)?
	'}';


Model returns Model:
	Role | User;

Controller returns Controller:
	Authentication;

Security returns Security:
	JWT;






Database returns Database:
	'Database'
	'{'
		'vendorName' vendorName=EDatabaseType
		'url' url=EString
		'username' username=EString
		'password' password=EString
	'}';

EString returns ecore::EString:
	STRING | ID;

ELongObject returns ecore::ELongObject:
	'-'? INT;

enum EDatabaseType returns EDatabaseType:
				PostgreSQL = 'PostgreSQL' | Oracle = 'Oracle' | MySQL = 'MySQL';

Attribute returns Attribute:
	isIdentifier?='isIdentifier'
	'Attribute'
	name=EString
	'{'
		'type' type=EType
		('collumnName' collumnName=EString)?
	'}';

Role returns Role:
	{Role}
	'Role'
	'{'
		('tableName' tableName=EString)?
		('model_attributes' '{' model_attributes+=Attribute ( "," model_attributes+=Attribute)* '}' )?
		('role_instances' '{' role_instances+=RoleInstance ( "," role_instances+=RoleInstance)* '}' )?
	'}';

User returns User:
	{User}
	'User'
	'{'
		('tableName' tableName=EString)?
		('model_attributes' '{' model_attributes+=Attribute ( "," model_attributes+=Attribute)* '}' )?
	'}';

enum EType returns EType:
				String = 'String' | Float = 'Float' | Long = 'Long' | Integer = 'Integer' | char = 'char' | Double = 'Double' | DateTime = 'DateTime' | Date = 'Date' | int = 'int';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

RoleInstance returns RoleInstance:
	{RoleInstance}
	'RoleInstance'
	name=EString;

Endpoint returns Endpoint:
	'Endpoint'
	'{'
		'url' url=EString
		('functionName' functionName=EString)?
		('method' method=EEndpointMethod)?
		('type' type=EEndpointType)?
		('role_authorities' '(' role_authorities+=[RoleInstance|EString] ( "," role_authorities+=[RoleInstance|EString])* ')' )?
	'}';

Authentication returns Authentication:
	{Authentication}
	'Authentication'
	name=EString
	'{'
		('path' path=EString)?
		('controller_endpoints' '{' controller_endpoints+=Endpoint ( "," controller_endpoints+=Endpoint)* '}' )?
	'}';

enum EEndpointMethod returns EEndpointMethod:
				GET = 'GET' | POST = 'POST' | PUT = 'PUT' | DELETE = 'DELETE';

enum EEndpointType returns EEndpointType:
				REGISTRATION = 'REGISTRATION' | LOGIN = 'LOGIN' | LOGOUT = 'LOGOUT' | OTHER = 'OTHER';

JWT returns JWT:
	'JWT'
	'{'
		'signatureAlgorithm' signatureAlgorithm=EString
		('secret' secret=EString)?
		('jwt_claims' '{' jwt_claims+=Claim ( "," jwt_claims+=Claim)* '}' )?
		'registeredclaims' registeredclaims=RegisteredClaims
	'}';

Claim returns Claim:
	'Claim'
	name=EString
	'{'
		('type' type=EClaimType)?
		'claim_attribute' claim_attribute=[Attribute|EString]
	'}';

RegisteredClaims returns RegisteredClaims:
	'RegisteredClaims'
	'{'
		'expirationTime' expirationTime=EInt
		('issuer' issuer=EString)?
		('audience' audience=EString)?
	'}';

enum EClaimType returns EClaimType:
				PRIVATE = 'PRIVATE' | PUBLIC = 'PUBLIC' | REGISTERED = 'REGISTERED';

EInt returns ecore::EInt:
	'-'? INT;
