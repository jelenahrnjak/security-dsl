/*
 * generated by Xtext 2.27.0
 */
package rs.ac.uns.ftn.securitydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import rs.ac.uns.ftn.securitydsl.services.SecurityDslGrammarAccess;
import security_dsl.Application;
import security_dsl.Attribute;
import security_dsl.Authentication;
import security_dsl.Claim;
import security_dsl.Database;
import security_dsl.Endpoint;
import security_dsl.JWT;
import security_dsl.RegisteredClaims;
import security_dsl.Role;
import security_dsl.RoleInstance;
import security_dsl.Security_dslPackage;
import security_dsl.User;

@SuppressWarnings("all")
public class SecurityDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SecurityDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Security_dslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Security_dslPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case Security_dslPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case Security_dslPackage.AUTHENTICATION:
				sequence_Authentication(context, (Authentication) semanticObject); 
				return; 
			case Security_dslPackage.CLAIM:
				sequence_Claim(context, (Claim) semanticObject); 
				return; 
			case Security_dslPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case Security_dslPackage.ENDPOINT:
				sequence_Endpoint(context, (Endpoint) semanticObject); 
				return; 
			case Security_dslPackage.JWT:
				sequence_JWT(context, (JWT) semanticObject); 
				return; 
			case Security_dslPackage.REGISTERED_CLAIMS:
				sequence_RegisteredClaims(context, (RegisteredClaims) semanticObject); 
				return; 
			case Security_dslPackage.ROLE:
				sequence_Role(context, (Role) semanticObject); 
				return; 
			case Security_dslPackage.ROLE_INSTANCE:
				sequence_RoleInstance(context, (RoleInstance) semanticObject); 
				return; 
			case Security_dslPackage.USER:
				sequence_User(context, (User) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Application returns Application
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         description=EString? 
	 *         group=EString? 
	 *         artifact=EString? 
	 *         packageName=EString? 
	 *         port=ELongObject? 
	 *         hostname=EString? 
	 *         app_database=Database? 
	 *         (app_models+=Model app_models+=Model*)? 
	 *         (app_controllers+=Controller app_controllers+=Controller*)? 
	 *         app_security=Security?
	 *     )
	 * </pre>
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (isIdentifier?='isIdentifier' name=EString type=EType collumnName=EString?)
	 * </pre>
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Controller returns Authentication
	 *     Authentication returns Authentication
	 *
	 * Constraint:
	 *     (name=EString path=EString? (controller_endpoints+=Endpoint controller_endpoints+=Endpoint*)?)
	 * </pre>
	 */
	protected void sequence_Authentication(ISerializationContext context, Authentication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Claim returns Claim
	 *
	 * Constraint:
	 *     (name=EString type=EClaimType? claim_attribute=[Attribute|EString])
	 * </pre>
	 */
	protected void sequence_Claim(ISerializationContext context, Claim semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     (vendorName=EDatabaseType url=EString username=EString password=EString)
	 * </pre>
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Security_dslPackage.Literals.DATABASE__VENDOR_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Security_dslPackage.Literals.DATABASE__VENDOR_NAME));
			if (transientValues.isValueTransient(semanticObject, Security_dslPackage.Literals.DATABASE__URL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Security_dslPackage.Literals.DATABASE__URL));
			if (transientValues.isValueTransient(semanticObject, Security_dslPackage.Literals.DATABASE__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Security_dslPackage.Literals.DATABASE__USERNAME));
			if (transientValues.isValueTransient(semanticObject, Security_dslPackage.Literals.DATABASE__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Security_dslPackage.Literals.DATABASE__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatabaseAccess().getVendorNameEDatabaseTypeEnumRuleCall_3_0(), semanticObject.getVendorName());
		feeder.accept(grammarAccess.getDatabaseAccess().getUrlEStringParserRuleCall_5_0(), semanticObject.getUrl());
		feeder.accept(grammarAccess.getDatabaseAccess().getUsernameEStringParserRuleCall_7_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getDatabaseAccess().getPasswordEStringParserRuleCall_9_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Endpoint returns Endpoint
	 *
	 * Constraint:
	 *     (
	 *         url=EString 
	 *         functionName=EString? 
	 *         method=EEndpointMethod? 
	 *         type=EEndpointType? 
	 *         (role_authorities+=[RoleInstance|EString] role_authorities+=[RoleInstance|EString]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_Endpoint(ISerializationContext context, Endpoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Security returns JWT
	 *     JWT returns JWT
	 *
	 * Constraint:
	 *     (signatureAlgorithm=EString secret=EString? (jwt_claims+=Claim jwt_claims+=Claim*)? registeredclaims=RegisteredClaims)
	 * </pre>
	 */
	protected void sequence_JWT(ISerializationContext context, JWT semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RegisteredClaims returns RegisteredClaims
	 *
	 * Constraint:
	 *     (expirationTime=EInt issuer=EString? audience=EString?)
	 * </pre>
	 */
	protected void sequence_RegisteredClaims(ISerializationContext context, RegisteredClaims semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     RoleInstance returns RoleInstance
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_RoleInstance(ISerializationContext context, RoleInstance semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Security_dslPackage.Literals.ROLE_INSTANCE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Security_dslPackage.Literals.ROLE_INSTANCE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoleInstanceAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns Role
	 *     Role returns Role
	 *
	 * Constraint:
	 *     (tableName=EString? (model_attributes+=Attribute model_attributes+=Attribute*)? (role_instances+=RoleInstance role_instances+=RoleInstance*)?)
	 * </pre>
	 */
	protected void sequence_Role(ISerializationContext context, Role semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Model returns User
	 *     User returns User
	 *
	 * Constraint:
	 *     (tableName=EString? (model_attributes+=Attribute model_attributes+=Attribute*)?)
	 * </pre>
	 */
	protected void sequence_User(ISerializationContext context, User semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
