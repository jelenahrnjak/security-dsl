// automatically generated by Xtext
grammar org.xtext.securitydsl.SecurityDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/security_dsl" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Application returns Application:
	{Application}
	'application:' 
	('artifact:' artifact=EString)?
	('name:' name=EString)?
	('group:' group=EString)?
	('packageName:' packageName=EString)?
	('description:' description=EString)?
	('port:' port=ELongObject)?
	('hostname:' hostname=EString)?
	
	('database:' app_database=Database)?
		
	('model:' 
		('user:' app_models+=User)? 
		('role:' app_models+=Role)?
	)?
	
	('security:' app_security=Security )?
	
	('controller:' 
		('auth:' app_controllers+=Authentication)? 	
	)?
	;


Model returns Model:
	Role | User;

Controller returns Controller:
	Authentication;

Security returns Security:
	JWT | OAuth2 | BasicAuthentication;

Database returns Database:
	 'vendor:'  vendorName=EDatabaseType
	 'url:' url=EString
	 'username:' username=EString
	 'password:' password=EString;

EString returns ecore::EString:
	STRING | ID;

ELongObject returns ecore::ELongObject:
	'-'? INT;

enum EDatabaseType returns EDatabaseType:
				PostgreSQL = 'PostgreSQL' | Oracle = 'Oracle' | MySQL = 'MySQL';

Attribute returns Attribute:
	'{'
	(identifier?='identifier')?
	(credential?='credential')?
	'name:' name=EString
	'type:' type=EType 
	('collumnName:' collumnName=EString)? '}';

Role returns Role:
	{Role} 
	('tableName:' tableName=EString)?
	('attributes:' '[' model_attributes+=Attribute ( "," model_attributes+=Attribute)* ']' )?
	('roles:' '[' role_instances+=RoleInstance ( "," role_instances+=RoleInstance)* ']' )?
	
	;

User returns User:
	{User} 
	('tableName:' tableName=EString)?
	('attributes:' '[' model_attributes+=Attribute ( "," model_attributes+=Attribute)* ']' )?
	;

enum EType returns EType:
				String = 'String' | Float = 'Float' | Long = 'Long' | Integer = 'Integer' | char = 'char' | Double = 'Double' | DateTime = 'DateTime' | Date = 'Date' | int = 'int';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

RoleInstance returns RoleInstance:
	{RoleInstance}
	(client?='client')? name=EString;

Endpoint returns Endpoint:
	'{'
		'url:' url=EString
		('functionName:' functionName=EString)?
		('method:' method=EEndpointMethod)?
		('type:' type=EEndpointType)?
		('roleAuthorities:' '[' role_authorities+=[RoleInstance|EString] ( "," role_authorities+=[RoleInstance|EString])* ']' )?
	'}';

Authentication returns Authentication:
	{Authentication}
	'name:' name=EString
	'path:' path=EString
	('endpoints:' '[' controller_endpoints+=Endpoint ( "," controller_endpoints+=Endpoint)* ']' )?;

enum EEndpointMethod returns EEndpointMethod:
				GET = 'GET' | POST = 'POST' | PUT = 'PUT' | DELETE = 'DELETE';

enum EEndpointType returns EEndpointType:
				REGISTRATION = 'REGISTRATION' | LOGIN = 'LOGIN' | LOGOUT = 'LOGOUT' | OTHER = 'OTHER';

JWT returns JWT:
	'jwt:'
	'header:'
	'signatureAlgorithm:' signatureAlgorithm=EString
	'payload:'
	'claims:' '['registeredclaims=RegisteredClaims (( "," jwt_claims+=Claim)*)?']'
	('signature:'
	'secret:' secret=EString)?;

Claim returns Claim:
	'{'
		(type=EClaimType',')?
		name=EString ':' claim_attribute=[Attribute|EString]
	'}';

RegisteredClaims returns RegisteredClaims:
	'{'
		'REGISTERED,'
		'expirationTime:' expirationTime=EInt
	'}'
	(',''{'
		'REGISTERED,'
		'issuer:' issuer=EString	
	'}')?
	
	(',''{'
		'REGISTERED,'
		'audience:' audience=EString
	'}')?;

enum EClaimType returns EClaimType:
				PRIVATE = 'PRIVATE' | PUBLIC = 'PUBLIC' | REGISTERED = 'REGISTERED';
				
enum EOAuthProvider returns EOAuthProvider:
				google = 'GOOGLE' | github = 'GITHUB' | facebook = 'FACEBOOK' | azure = 'MICROSOFT_AZURE' | linkedin = 'LINKEDIN' | twitter = 'TWITTER' | instagram = 'INSTAGRAM';

OAuth2 returns OAuth2:
	'OAuth2.0:'
	'providers:' '[' providers+=Provider ( "," providers+=Provider)* ']';
	
Provider returns Provider:
	'{' 
		'name:' name=EOAuthProvider ','
		'clientId:' clientId=EString ','
		'clientSecret:' clientSecret=EString 
		(',' 'redirectUri:' redirectUri=EString)?
	'}'
;

BasicAuthentication returns BasicAuthentication:
	{BasicAuthentication} 'basicAuthentication';

EInt returns ecore::EInt:
	'-'? INT;
