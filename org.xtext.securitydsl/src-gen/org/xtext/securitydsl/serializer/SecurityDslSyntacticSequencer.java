/*
 * generated by Xtext 2.27.0
 */
package org.xtext.securitydsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.securitydsl.services.SecurityDslGrammarAccess;

@SuppressWarnings("all")
public class SecurityDslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SecurityDslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Application_ControllerKeyword_14_0_q;
	protected AbstractElementAlias match_Application_ModelKeyword_12_0_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SecurityDslGrammarAccess) access;
		match_Application_ControllerKeyword_14_0_q = new TokenAlias(false, true, grammarAccess.getApplicationAccess().getControllerKeyword_14_0());
		match_Application_ModelKeyword_12_0_q = new TokenAlias(false, true, grammarAccess.getApplicationAccess().getModelKeyword_12_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Application_ControllerKeyword_14_0_q.equals(syntax))
				emit_Application_ControllerKeyword_14_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Application_ModelKeyword_12_0_q.equals(syntax))
				emit_Application_ModelKeyword_12_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'controller:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     app_database=Database 'model:'? (ambiguity) (rule end)
	 *     app_entities+=Role (ambiguity) (rule end)
	 *     app_entities+=User (ambiguity) (rule end)
	 *     app_security=Security (ambiguity) (rule end)
	 *     description=EString 'model:'? (ambiguity) (rule end)
	 *     group=EString 'model:'? (ambiguity) (rule end)
	 *     hostname=EString 'model:'? (ambiguity) (rule end)
	 *     packageName=EString 'model:'? (ambiguity) (rule end)
	 *     port=ELongObject 'model:'? (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Application_ControllerKeyword_14_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'model:'?
	 *
	 * This ambiguous syntax occurs at:
	 *     app_database=Database (ambiguity) 'controller:' 'auth:' app_controllers+=Authentication
	 *     app_database=Database (ambiguity) 'controller:'? (rule end)
	 *     app_database=Database (ambiguity) 'security:' app_security=Security
	 *     description=EString (ambiguity) 'controller:' 'auth:' app_controllers+=Authentication
	 *     description=EString (ambiguity) 'controller:'? (rule end)
	 *     description=EString (ambiguity) 'security:' app_security=Security
	 *     group=EString (ambiguity) 'controller:' 'auth:' app_controllers+=Authentication
	 *     group=EString (ambiguity) 'controller:'? (rule end)
	 *     group=EString (ambiguity) 'security:' app_security=Security
	 *     hostname=EString (ambiguity) 'controller:' 'auth:' app_controllers+=Authentication
	 *     hostname=EString (ambiguity) 'controller:'? (rule end)
	 *     hostname=EString (ambiguity) 'security:' app_security=Security
	 *     packageName=EString (ambiguity) 'controller:' 'auth:' app_controllers+=Authentication
	 *     packageName=EString (ambiguity) 'controller:'? (rule end)
	 *     packageName=EString (ambiguity) 'security:' app_security=Security
	 *     port=ELongObject (ambiguity) 'controller:' 'auth:' app_controllers+=Authentication
	 *     port=ELongObject (ambiguity) 'controller:'? (rule end)
	 *     port=ELongObject (ambiguity) 'security:' app_security=Security
	 
	 * </pre>
	 */
	protected void emit_Application_ModelKeyword_12_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
