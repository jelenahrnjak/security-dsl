package org.xtext.securitydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import security_dsl.Application;
import security_dsl.Attribute;
import security_dsl.Authentication;
import security_dsl.Claim;
import security_dsl.Controller;
import security_dsl.EClaimType;
import security_dsl.EEndpointType;
import security_dsl.EType;
import security_dsl.Endpoint;
import security_dsl.JWT;
import security_dsl.RegisteredClaims;
import security_dsl.Role;
import security_dsl.Security;
import security_dsl.User;

@SuppressWarnings("all")
public class SecurityDslJWTGenerator {
  public SecurityDslJWTGenerator(final Resource resource, final IFileSystemAccess2 fsa, final Application app, final String srcDestination) {
    User user = Iterators.<User>filter(resource.getAllContents(), User.class).next();
    Role role = Iterators.<Role>filter(resource.getAllContents(), Role.class).next();
    String credentialNameUser = this.getCredential(user.getModel_attributes()).getName();
    fsa.generateFile((srcDestination + "/config/WebConfig.java"), this.generateWebConfig(app.getPackageName()));
    fsa.generateFile((srcDestination + "/config/WebSecurityConfig.java"), this.generateWebSecurityConfig(app.getPackageName(), this.getAuthController(app.getApp_controllers())));
    Security _app_security = app.getApp_security();
    fsa.generateFile((srcDestination + "/util/TokenUtils.java"), this.generateTokenUtils(app.getPackageName(), ((JWT) _app_security), credentialNameUser));
    fsa.generateFile((srcDestination + "/dto/UserTokenState.java"), this.generateUserTokenStateDTO(app.getPackageName()));
    fsa.generateFile((srcDestination + "/dto/JwtAuthenticationRequest.java"), this.generateJwtAuthenticationRequestDTO(app.getPackageName(), credentialNameUser));
    fsa.generateFile((srcDestination + "/security/auth/RestAuthenticationEntryPoint.java"), this.generateRestAuthenticationEntryPoint(app.getPackageName()));
    fsa.generateFile((srcDestination + "/security/auth/TokenBasedAuthentication.java"), this.generateTokenBasedAuthentication(app.getPackageName()));
    fsa.generateFile((srcDestination + "/security/auth/TokenAuthenticationFilter.java"), this.generateTokenAuthenticationFilter(app.getPackageName()));
  }

  public String generateTokenAuthenticationFilter(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".security.auth;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.io.IOException;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.FilterChain;");
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.ServletException;");
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.http.HttpServletRequest;");
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.http.HttpServletResponse;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import ");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + appMainPackage);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(".util.TokenUtils;");
    _builder_2.newLine();
    _builder_2.append("import org.apache.commons.logging.Log;");
    _builder_2.newLine();
    _builder_2.append("import org.apache.commons.logging.LogFactory;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.core.context.SecurityContextHolder;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.core.userdetails.UserDetailsService;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.web.filter.OncePerRequestFilter;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("import io.jsonwebtoken.ExpiredJwtException;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("public class TokenAuthenticationFilter extends OncePerRequestFilter {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private TokenUtils tokenUtils;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private UserDetailsService userDetailsService;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("protected final Log LOGGER = LogFactory.getLog(getClass());");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public TokenAuthenticationFilter(TokenUtils tokenHelper, UserDetailsService userDetailsService) {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("this.tokenUtils = tokenHelper;");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("this.userDetailsService = userDetailsService;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)");
    _builder_2.newLine();
    _builder_2.append("            ");
    _builder_2.append("throws IOException, ServletException {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("String credential;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("try {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("            ");
    _builder_2.append("if (authToken != null) {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("                ");
    _builder_2.append("credential = tokenUtils.getCredentialFromToken(authToken);");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("                ");
    _builder_2.append("if (credential != null) {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("                    ");
    _builder_2.append("UserDetails userDetails = userDetailsService.loadUserByUsername(credential);");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("                    ");
    _builder_2.append("if (tokenUtils.validateToken(authToken, userDetails)) {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("                        ");
    _builder_2.append("TokenBasedAuthentication authentication = new TokenBasedAuthentication(userDetails);");
    _builder_2.newLine();
    _builder_2.append("                        ");
    _builder_2.append("authentication.setToken(authToken);");
    _builder_2.newLine();
    _builder_2.append("                        ");
    _builder_2.append("SecurityContextHolder.getContext().setAuthentication(authentication);");
    _builder_2.newLine();
    _builder_2.append("                    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("                ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("            ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("} catch (ExpiredJwtException ex) {");
    _builder_2.newLine();
    _builder_2.append("            ");
    _builder_2.append("LOGGER.debug(\"Token expired!\");");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("chain.doFilter(request, response);");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    String content = (_plus_2 + _builder_2);
    return content;
  }

  public String generateTokenBasedAuthentication(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".security.auth;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.springframework.security.authentication.AbstractAuthenticationToken;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class TokenBasedAuthentication extends AbstractAuthenticationToken {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("private static final long serialVersionUID = 1L;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("private String token;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("private final UserDetails principle;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public TokenBasedAuthentication(UserDetails principle) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("super(principle.getAuthorities());");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.principle = principle;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public String getToken() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return token;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public void setToken(String token) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.token = token;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public boolean isAuthenticated() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return true;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public Object getCredentials() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return token;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public UserDetails getPrincipal() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return principle;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    return content;
  }

  public String generateRestAuthenticationEntryPoint(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".security.auth;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.security.core.AuthenticationException;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.security.web.AuthenticationEntryPoint;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.stereotype.Component;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.http.HttpServletRequest;");
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.http.HttpServletResponse;");
    _builder_1.newLine();
    _builder_1.append("import java.io.IOException;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Component");
    _builder_1.newLine();
    _builder_1.append("public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public void commence(HttpServletRequest request,");
    _builder_1.newLine();
    _builder_1.append("                         ");
    _builder_1.append("HttpServletResponse response,");
    _builder_1.newLine();
    _builder_1.append("                         ");
    _builder_1.append("AuthenticationException authException) throws IOException {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    return content;
  }

  public String generateException(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".exception;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class ResourceConflictException extends RuntimeException {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private static final long serialVersionUID = 1791564636123821405L;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private Long resourceId;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public ResourceConflictException(Long resourceId, String message) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("super(message);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.setResourceId(resourceId);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public Long getResourceId() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return resourceId;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void setResourceId(Long resourceId) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.resourceId = resourceId;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    return content;
  }

  public Authentication getAuthController(final List<Controller> controllers) {
    for (final Controller c : controllers) {
      if ((c instanceof Authentication)) {
        return ((Authentication)c);
      }
    }
    return null;
  }

  public String generateWebConfig(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".config;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.springframework.context.annotation.Configuration;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.web.servlet.config.annotation.CorsRegistry;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.web.servlet.config.annotation.EnableWebMvc;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Configuration");
    _builder_1.newLine();
    _builder_1.append("@EnableWebMvc");
    _builder_1.newLine();
    _builder_1.append("public class WebConfig implements WebMvcConfigurer {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Override");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public void addCorsMappings(CorsRegistry registry) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("registry.addMapping(\"/**\")");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append(".allowedHeaders(\"*\")");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append(".allowedMethods(\"GET\", \"POST\", \"DELETE\", \"PUT\")");
    _builder_1.newLine();
    _builder_1.append("                ");
    _builder_1.append(".allowedOrigins(\"http://localhost:4200\");");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String webConfig = (_plus + _builder_1);
    return webConfig;
  }

  public String generateWebSecurityConfig(final String appMainPackage, final Authentication authController) {
    String loginEndpoint = "";
    EList<Endpoint> _controller_endpoints = authController.getController_endpoints();
    for (final Endpoint e : _controller_endpoints) {
      EEndpointType _type = e.getType();
      boolean _equals = Objects.equal(_type, EEndpointType.LOGIN);
      if (_equals) {
        String _path = authController.getPath();
        String _url = e.getUrl();
        String _plus = (_path + _url);
        loginEndpoint = _plus;
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus_1 = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".config;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import ");
    String _plus_2 = (_plus_1 + _builder_1);
    String _plus_3 = (_plus_2 + appMainPackage);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(".security.auth.RestAuthenticationEntryPoint;");
    _builder_2.newLine();
    _builder_2.append("import ");
    String _plus_4 = (_plus_3 + _builder_2);
    String _plus_5 = (_plus_4 + appMainPackage);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append(".security.auth.TokenAuthenticationFilter;");
    _builder_3.newLine();
    _builder_3.append("import ");
    String _plus_6 = (_plus_5 + _builder_3);
    String _plus_7 = (_plus_6 + appMainPackage);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append(".service.impl.CustomUserDetailsService;");
    _builder_4.newLine();
    _builder_4.append("import ");
    String _plus_8 = (_plus_7 + _builder_4);
    String _plus_9 = (_plus_8 + appMainPackage);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(".service.impl.UserServiceImpl;");
    _builder_5.newLine();
    _builder_5.append("import ");
    String _plus_10 = (_plus_9 + _builder_5);
    String _plus_11 = (_plus_10 + appMainPackage);
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append(".util.TokenUtils;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.context.annotation.Bean;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.context.annotation.Configuration;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.context.annotation.Lazy;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.http.HttpMethod;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.authentication.AuthenticationManager;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.config.annotation.web.builders.HttpSecurity;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.config.annotation.web.builders.WebSecurity;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.config.http.SessionCreationPolicy;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.crypto.password.PasswordEncoder;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("@Configuration");
    _builder_6.newLine();
    _builder_6.append("@EnableGlobalMethodSecurity(prePostEnabled = true)");
    _builder_6.newLine();
    _builder_6.append("public class WebSecurityConfig extends WebSecurityConfigurerAdapter {");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Bean");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("public PasswordEncoder passwordEncoder() {");
    _builder_6.newLine();
    _builder_6.append("        ");
    _builder_6.append("return new BCryptPasswordEncoder();");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Autowired");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("private CustomUserDetailsService customUserDetailsService;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Autowired");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("private RestAuthenticationEntryPoint restAuthenticationEntryPoint;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Bean");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Override");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("public AuthenticationManager authenticationManagerBean() throws Exception {");
    _builder_6.newLine();
    _builder_6.append("        ");
    _builder_6.append("return super.authenticationManagerBean();");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Override");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("public void configure(AuthenticationManagerBuilder auth) throws Exception {");
    _builder_6.newLine();
    _builder_6.append("        ");
    _builder_6.append("auth");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("                ");
    _builder_6.append(".userDetailsService(customUserDetailsService)");
    _builder_6.newLine();
    _builder_6.append("                ");
    _builder_6.append(".passwordEncoder(passwordEncoder());");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("}");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Autowired");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("private TokenUtils tokenUtils;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("@Override");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("protected void configure(HttpSecurity http) throws Exception {");
    _builder_6.newLine();
    _builder_6.append("        ");
    _builder_6.append("http");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("                ");
    _builder_6.append(".sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("                ");
    _builder_6.append(".exceptionHandling().authenticationEntryPoint(restAuthenticationEntryPoint).and()");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("                ");
    _builder_6.append(".authorizeRequests().antMatchers(\"");
    String _plus_12 = (_plus_11 + _builder_6);
    String _path_1 = authController.getPath();
    String _plus_13 = (_plus_12 + _path_1);
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("/**\").permitAll()");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("                ");
    _builder_7.append(".anyRequest().authenticated().and()");
    _builder_7.newLine();
    _builder_7.append("                ");
    _builder_7.append(".cors().and()");
    _builder_7.newLine();
    _builder_7.append("                ");
    _builder_7.append(".addFilterBefore(new TokenAuthenticationFilter(tokenUtils, customUserDetailsService), BasicAuthenticationFilter.class);");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("        ");
    _builder_7.append("http.csrf().disable();");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("}");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("@Override");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("public void configure(WebSecurity web) throws Exception {");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("        ");
    _builder_7.append("web.ignoring().antMatchers(HttpMethod.POST, \"");
    String _plus_14 = (_plus_13 + _builder_7);
    String _plus_15 = (_plus_14 + loginEndpoint);
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("\");");
    _builder_8.newLine();
    _builder_8.append("        ");
    _builder_8.append("web.ignoring().antMatchers(HttpMethod.GET, \"/\", \"/webjars/**\", \"/*.html\", \"favicon.ico\", \"/**/*.html\",");
    _builder_8.newLine();
    _builder_8.append("                ");
    _builder_8.append("\"/**/*.css\", \"/**/*.js\");");
    _builder_8.newLine();
    _builder_8.append("    ");
    _builder_8.append("}");
    _builder_8.newLine();
    _builder_8.newLine();
    _builder_8.append("}");
    _builder_8.newLine();
    String config = (_plus_15 + _builder_8);
    return config;
  }

  public String generateTokenUtils(final String appMainPackage, final JWT jwt, final String credentialNameUser) {
    RegisteredClaims regClaim = jwt.getRegisteredclaims();
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".util;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import java.util.Date;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import javax.servlet.http.HttpServletRequest;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.springframework.beans.factory.annotation.Value;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.stereotype.Component;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import io.jsonwebtoken.Claims;");
    _builder_1.newLine();
    _builder_1.append("import io.jsonwebtoken.ExpiredJwtException;");
    _builder_1.newLine();
    _builder_1.append("import io.jsonwebtoken.Jwts;");
    _builder_1.newLine();
    _builder_1.append("import io.jsonwebtoken.SignatureAlgorithm;");
    _builder_1.newLine();
    _builder_1.append("import ");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + appMainPackage);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(".model.User;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("@Component");
    _builder_2.newLine();
    _builder_2.append("public class TokenUtils {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("\t");
    _builder_2.append("private String ISSUER \"");
    String _plus_3 = (_plus_2 + _builder_2);
    String _issuer = regClaim.getIssuer();
    String _plus_4 = (_plus_3 + _issuer);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("\";");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public String SECRET = \"");
    String _plus_5 = (_plus_4 + _builder_3);
    String _secret = jwt.getSecret();
    String _plus_6 = (_plus_5 + _secret);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("\";");
    _builder_4.newLine();
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("private int EXPIRES_IN = ");
    String _plus_7 = (_plus_6 + _builder_4);
    int _expirationTime = regClaim.getExpirationTime();
    String _plus_8 = (_plus_7 + Integer.valueOf(_expirationTime));
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(";");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("@Value(\"Authorization\")");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("private String AUTH_HEADER;");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("private static final String AUDIENCE_WEB = \"");
    String _plus_9 = (_plus_8 + _builder_5);
    String _audience = regClaim.getAudience();
    String _plus_10 = (_plus_9 + _audience);
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("\";");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("// Algoritam za potpisivanje JWT");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("private SignatureAlgorithm SIGNATURE_ALGORITHM = SignatureAlgorithm.");
    String _plus_11 = (_plus_10 + _builder_6);
    String _signatureAlgorithm = jwt.getSignatureAlgorithm();
    String _plus_12 = (_plus_11 + _signatureAlgorithm);
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append(";");
    _builder_7.newLine();
    _builder_7.append("\t");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("\t");
    _builder_7.append("public String generateToken(String ");
    String _plus_13 = (_plus_12 + _builder_7);
    String _plus_14 = (_plus_13 + credentialNameUser);
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append(") {");
    _builder_8.newLine();
    _builder_8.append("\t\t");
    _builder_8.append("return Jwts.builder()");
    _builder_8.newLine();
    _builder_8.append("\t\t\t\t");
    _builder_8.append(".setIssuer(ISSUER)");
    _builder_8.newLine();
    _builder_8.append("\t\t\t\t");
    _builder_8.append(".setSubject(");
    String _plus_15 = (_plus_14 + _builder_8);
    String _name = this.findSubjectClaim(jwt.getJwt_claims()).getClaim_attribute().getName();
    String _plus_16 = (_plus_15 + _name);
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append(")");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t");
    _builder_9.append(".setAudience(generateAudience())");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t");
    _builder_9.append(".setIssuedAt(new Date())");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t");
    _builder_9.append(".setExpiration(generateExpirationDate())");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t");
    _builder_9.append(".signWith(SIGNATURE_ALGORITHM, SECRET).compact();");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("private String generateAudience() {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return AUDIENCE_WEB;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("private Date generateExpirationDate() {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return new Date(new Date().getTime() + EXPIRES_IN);");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("public String getToken(HttpServletRequest request) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("String authHeader = getAuthHeaderFromHeader(request);");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("if (authHeader != null && authHeader.startsWith(\"Bearer \")) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("return authHeader.substring(7); ");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return null;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("public String getCredentialFromToken(String token) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("String credential;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("try {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("credential = claims.getSubject();");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (ExpiredJwtException ex) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("throw ex;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (Exception e) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("credential = null;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return credential;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("public Date getIssuedAtDateFromToken(String token) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("Date issueAt;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("try {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("issueAt = claims.getIssuedAt();");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (ExpiredJwtException ex) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("throw ex;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (Exception e) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("issueAt = null;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return issueAt;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("public String getAudienceFromToken(String token) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("String audience;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("try {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("audience = claims.getAudience();");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (ExpiredJwtException ex) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("throw ex;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (Exception e) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("audience = null;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return audience;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("public Date getExpirationDateFromToken(String token) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("Date expiration;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("try {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("expiration = claims.getExpiration();");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (ExpiredJwtException ex) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("throw ex;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (Exception e) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("expiration = null;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return expiration;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("private Claims getAllClaimsFromToken(String token) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("Claims claims;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("try {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("claims = Jwts.parser()");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t\t");
    _builder_9.append(".setSigningKey(SECRET)");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t\t");
    _builder_9.append(".parseClaimsJws(token)");
    _builder_9.newLine();
    _builder_9.append("\t\t\t\t\t");
    _builder_9.append(".getBody();");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (ExpiredJwtException ex) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("throw ex;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("} catch (Exception e) {");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("claims = null;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return claims;");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("}");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.append("public Boolean validateToken(String token, UserDetails userDetails) {");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("User user = (User) userDetails;");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("final String credential = getCredentialFromToken(token);");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("final Date created = getIssuedAtDateFromToken(token);");
    _builder_9.newLine();
    _builder_9.append("\t");
    _builder_9.newLine();
    _builder_9.append("\t\t");
    _builder_9.append("return (credential != null ");
    _builder_9.newLine();
    _builder_9.append("\t\t\t");
    _builder_9.append("&& credential.equals(userDetails.get");
    String _plus_17 = (_plus_16 + _builder_9);
    String _firstUpper = StringExtensions.toFirstUpper(credentialNameUser);
    String _plus_18 = (_plus_17 + _firstUpper);
    StringConcatenation _builder_10 = new StringConcatenation();
    _builder_10.append("()) ");
    _builder_10.newLine();
    _builder_10.append("\t\t\t");
    _builder_10.append("&& !isCreatedBeforeLastPasswordReset(created, user.getLastPasswordResetDate()));  ");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("}");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("private Boolean isCreatedBeforeLastPasswordReset(Date created, Date lastPasswordReset) {");
    _builder_10.newLine();
    _builder_10.append("\t\t");
    _builder_10.append("return (lastPasswordReset != null && created.before(lastPasswordReset));");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("}");
    _builder_10.newLine();
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("public int getExpiredIn() {");
    _builder_10.newLine();
    _builder_10.append("\t\t");
    _builder_10.append("return EXPIRES_IN;");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("}");
    _builder_10.newLine();
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("public String getAuthHeaderFromHeader(HttpServletRequest request) {");
    _builder_10.newLine();
    _builder_10.append("\t\t");
    _builder_10.append("return request.getHeader(AUTH_HEADER);");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.append("}");
    _builder_10.newLine();
    _builder_10.append("\t");
    _builder_10.newLine();
    _builder_10.append("}");
    _builder_10.newLine();
    String utils = (_plus_18 + _builder_10);
    return utils;
  }

  public Claim findSubjectClaim(final List<Claim> claims) {
    for (final Claim c : claims) {
      if ((Objects.equal(c.getType(), EClaimType.REGISTERED) && Objects.equal(c.getName().toLowerCase(), "subject"))) {
        return c;
      }
    }
    return null;
  }

  public Attribute getIdentifier(final List<Attribute> attributes) {
    for (final Attribute a : attributes) {
      boolean _isIdentifier = a.isIdentifier();
      if (_isIdentifier) {
        return a;
      }
    }
    return null;
  }

  public Attribute getCredential(final List<Attribute> attributes) {
    for (final Attribute a : attributes) {
      boolean _isCredential = a.isCredential();
      if (_isCredential) {
        return a;
      }
    }
    return null;
  }

  public Attribute getStringAttributeForRole(final List<Attribute> unsortedAttributes) {
    final ArrayList<Attribute> attributes = CollectionLiterals.<Attribute>newArrayList();
    for (final Attribute a : unsortedAttributes) {
      boolean _isIdentifier = a.isIdentifier();
      if (_isIdentifier) {
        attributes.add(0, a);
      } else {
        attributes.add(a);
      }
    }
    for (final Attribute a_1 : attributes) {
      EType _type = a_1.getType();
      boolean _equals = Objects.equal(_type, EType.STRING);
      if (_equals) {
        return a_1;
      }
    }
    return null;
  }

  public String generateUserTokenStateDTO(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".dto;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class UserTokenState {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("private String accessToken;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("private Long expiresIn;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public UserTokenState() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.accessToken = null;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.expiresIn = null;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public UserTokenState(String accessToken, long expiresIn) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.accessToken = accessToken;");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.expiresIn = expiresIn;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public String getAccessToken() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return accessToken;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public void setAccessToken(String accessToken) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.accessToken = accessToken;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public Long getExpiresIn() {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return expiresIn;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public void setExpiresIn(Long expiresIn) {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("this.expiresIn = expiresIn;");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    return content;
  }

  public String generateJwtAuthenticationRequestDTO(final String appMainPackage, final String credentialNameUser) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".dto;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class JwtAuthenticationRequest {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("private String ");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + credentialNameUser);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(";");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private String password;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public JwtAuthenticationRequest() {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("super();");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("public JwtAuthenticationRequest(String ");
    String _plus_3 = (_plus_2 + _builder_2);
    String _plus_4 = (_plus_3 + credentialNameUser);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append(", String password) {");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("this.set");
    String _plus_5 = (_plus_4 + _builder_3);
    String _firstUpper = StringExtensions.toFirstUpper(credentialNameUser);
    String _plus_6 = (_plus_5 + _firstUpper);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("(");
    String _plus_7 = (_plus_6 + _builder_4);
    String _plus_8 = (_plus_7 + credentialNameUser);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(");");
    _builder_5.newLine();
    _builder_5.append("        ");
    _builder_5.append("this.setPassword(password);");
    _builder_5.newLine();
    _builder_5.append("    ");
    _builder_5.append("}");
    _builder_5.newLine();
    _builder_5.newLine();
    _builder_5.append("    ");
    _builder_5.append("public String get");
    String _plus_9 = (_plus_8 + _builder_5);
    String _firstUpper_1 = StringExtensions.toFirstUpper(credentialNameUser);
    String _plus_10 = (_plus_9 + _firstUpper_1);
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append("() {");
    _builder_6.newLine();
    _builder_6.append("        ");
    _builder_6.append("return this.");
    String _plus_11 = (_plus_10 + _builder_6);
    String _plus_12 = (_plus_11 + credentialNameUser);
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append(";");
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("}");
    _builder_7.newLine();
    _builder_7.newLine();
    _builder_7.append("    ");
    _builder_7.append("public void set");
    String _plus_13 = (_plus_12 + _builder_7);
    String _firstUpper_2 = StringExtensions.toFirstUpper(credentialNameUser);
    String _plus_14 = (_plus_13 + _firstUpper_2);
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("(String ");
    String _plus_15 = (_plus_14 + _builder_8);
    String _plus_16 = (_plus_15 + credentialNameUser);
    StringConcatenation _builder_9 = new StringConcatenation();
    _builder_9.append(") {");
    _builder_9.newLine();
    _builder_9.append("        ");
    _builder_9.append("this.");
    String _plus_17 = (_plus_16 + _builder_9);
    String _plus_18 = (_plus_17 + credentialNameUser);
    StringConcatenation _builder_10 = new StringConcatenation();
    _builder_10.append("= ");
    String _plus_19 = (_plus_18 + _builder_10);
    String _plus_20 = (_plus_19 + credentialNameUser);
    StringConcatenation _builder_11 = new StringConcatenation();
    _builder_11.append(";");
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("}");
    _builder_11.newLine();
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("public String getPassword() {");
    _builder_11.newLine();
    _builder_11.append("        ");
    _builder_11.append("return this.password;");
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("}");
    _builder_11.newLine();
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("public void setPassword(String password) {");
    _builder_11.newLine();
    _builder_11.append("        ");
    _builder_11.append("this.password = password;");
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("}");
    _builder_11.newLine();
    _builder_11.append("}");
    _builder_11.newLine();
    String content = (_plus_20 + _builder_11);
    return content;
  }
}
