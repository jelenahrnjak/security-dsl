package org.xtext.securitydsl.generator;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import security_dsl.Authentication;
import security_dsl.Claim;
import security_dsl.EClaimType;
import security_dsl.JWT;

@SuppressWarnings("all")
public class SecurityDslJWTGenerator {
  private String packageName;

  public SecurityDslJWTGenerator(final IFileSystemAccess2 fsa, final String packageName, final String srcDestination, final Authentication authController, final JWT jwt, final String credentialUser) {
    this.packageName = packageName;
    fsa.generateFile((srcDestination + "/config/WebConfig.java"), this.generateWebConfig());
    fsa.generateFile((srcDestination + "/config/SecurityConfig.java"), this.generateSecurityConfig(authController));
    fsa.generateFile((srcDestination + "/util/TokenUtils.java"), this.generateTokenUtils(jwt, credentialUser));
    fsa.generateFile((srcDestination + "/dto/UserTokenStateDTO.java"), this.generateUserTokenStateDTO());
    fsa.generateFile((srcDestination + "/security/auth/RestAuthenticationEntryPoint.java"), this.generateRestAuthenticationEntryPoint());
    fsa.generateFile((srcDestination + "/security/auth/TokenBasedAuthentication.java"), this.generateTokenBasedAuthentication());
    fsa.generateFile((srcDestination + "/security/auth/TokenAuthenticationFilter.java"), this.generateTokenAuthenticationFilter());
    fsa.generateFile((srcDestination + "/security/auth/TokenAuthenticationFilter.java"), this.generateTokenAuthenticationFilter());
  }

  public String generateTokenAuthenticationFilter() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".security.auth;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.servlet.FilterChain;");
    _builder.newLine();
    _builder.append("import javax.servlet.ServletException;");
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletRequest;");
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletResponse;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import ");
    _builder.append(this.packageName);
    _builder.append(".util.TokenUtils;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.apache.commons.logging.Log;");
    _builder.newLine();
    _builder.append("import org.apache.commons.logging.LogFactory;");
    _builder.newLine();
    _builder.append("import org.springframework.security.core.context.SecurityContextHolder;");
    _builder.newLine();
    _builder.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder.newLine();
    _builder.append("import org.springframework.security.core.userdetails.UserDetailsService;");
    _builder.newLine();
    _builder.append("import org.springframework.web.filter.OncePerRequestFilter;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import io.jsonwebtoken.ExpiredJwtException;");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TokenAuthenticationFilter extends OncePerRequestFilter {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private TokenUtils tokenUtils;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private UserDetailsService userDetailsService;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected final Log LOGGER = LogFactory.getLog(getClass());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public TokenAuthenticationFilter(TokenUtils tokenHelper, UserDetailsService userDetailsService) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.tokenUtils = tokenHelper;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.userDetailsService = userDetailsService;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain chain)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throws IOException, ServletException {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String credential;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String authToken = tokenUtils.getToken(request);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (authToken != null) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("credential = tokenUtils.getCredentialFromToken(authToken);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (credential != null) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("UserDetails userDetails = userDetailsService.loadUserByUsername(credential);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (tokenUtils.validateToken(authToken, userDetails)) {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("TokenBasedAuthentication authentication = new TokenBasedAuthentication(userDetails);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("authentication.setToken(authToken);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("SecurityContextHolder.getContext().setAuthentication(authentication);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (ExpiredJwtException ex) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("LOGGER.debug(\"Token expired!\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("chain.doFilter(request, response);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateTokenBasedAuthentication() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".security.auth;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.security.authentication.AbstractAuthenticationToken;");
    _builder.newLine();
    _builder.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TokenBasedAuthentication extends AbstractAuthenticationToken {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final long serialVersionUID = 1L;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String token;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private final UserDetails principle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public TokenBasedAuthentication(UserDetails principle) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(principle.getAuthorities());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.principle = principle;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public String getToken() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return token;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void setToken(String token) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.token = token;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public boolean isAuthenticated() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return true;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public Object getCredentials() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return token;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public UserDetails getPrincipal() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return principle;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateRestAuthenticationEntryPoint() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".security.auth;");
    _builder.newLineIfNotEmpty();
    _builder.append("import org.springframework.security.core.AuthenticationException;");
    _builder.newLine();
    _builder.append("import org.springframework.security.web.AuthenticationEntryPoint;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletRequest;");
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletResponse;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Component");
    _builder.newLine();
    _builder.append("public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void commence(HttpServletRequest request,");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("HttpServletResponse response,");
    _builder.newLine();
    _builder.append("                         ");
    _builder.append("AuthenticationException authException) throws IOException {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateException() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".exception;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("public class ResourceConflictException extends RuntimeException {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final long serialVersionUID = 1791564636123821405L;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Long resourceId;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ResourceConflictException(Long resourceId, String message) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(message);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.setResourceId(resourceId);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Long getResourceId() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return resourceId;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setResourceId(Long resourceId) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.resourceId = resourceId;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateWebConfig() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".config;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.web.servlet.config.annotation.CorsRegistry;");
    _builder.newLine();
    _builder.append("import org.springframework.web.servlet.config.annotation.EnableWebMvc;");
    _builder.newLine();
    _builder.append("import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("@EnableWebMvc");
    _builder.newLine();
    _builder.append("public class WebConfig implements WebMvcConfigurer {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void addCorsMappings(CorsRegistry registry) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("registry.addMapping(\"/**\")");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".allowedHeaders(\"*\")");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".allowedMethods(\"GET\", \"POST\", \"DELETE\", \"PUT\")");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".allowedOrigins(\"http://localhost:4200\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public CharSequence generateSecurityConfig(final Authentication authController) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".config;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ");
    _builder.append(this.packageName);
    _builder.append(".security.auth.RestAuthenticationEntryPoint;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    _builder.append(this.packageName);
    _builder.append(".security.auth.TokenAuthenticationFilter;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    _builder.append(this.packageName);
    _builder.append(".service.impl.UserServiceImpl;");
    _builder.newLineIfNotEmpty();
    _builder.append("import ");
    _builder.append(this.packageName);
    _builder.append(".util.TokenUtils;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Bean;");
    _builder.newLine();
    _builder.append("import org.springframework.context.annotation.Configuration;");
    _builder.newLine();
    _builder.append("import org.springframework.http.HttpMethod;");
    _builder.newLine();
    _builder.append("import org.springframework.security.authentication.AuthenticationManager;");
    _builder.newLine();
    _builder.append("import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;");
    _builder.newLine();
    _builder.append("import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;");
    _builder.newLine();
    _builder.append("import org.springframework.security.config.annotation.web.builders.HttpSecurity;");
    _builder.newLine();
    _builder.append("import org.springframework.security.config.annotation.web.builders.WebSecurity;");
    _builder.newLine();
    _builder.append("import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;");
    _builder.newLine();
    _builder.append("import org.springframework.security.config.http.SessionCreationPolicy;");
    _builder.newLine();
    _builder.append("import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;");
    _builder.newLine();
    _builder.append("import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Configuration");
    _builder.newLine();
    _builder.append("@EnableGlobalMethodSecurity(prePostEnabled = true)");
    _builder.newLine();
    _builder.append("public class SecurityConfig extends WebSecurityConfigurerAdapter {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private UserServiceImpl userService;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private RestAuthenticationEntryPoint restAuthenticationEntryPoint;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Autowired");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private TokenUtils tokenUtils;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public BCryptPasswordEncoder passwordEncoder() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new BCryptPasswordEncoder();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Bean");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public AuthenticationManager authenticationManagerBean() throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return super.authenticationManagerBean();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void configure(AuthenticationManagerBuilder auth) throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("auth");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".userDetailsService(userService)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".passwordEncoder(passwordEncoder());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("protected void configure(HttpSecurity http) throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("http");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".exceptionHandling().authenticationEntryPoint(restAuthenticationEntryPoint).and()");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".authorizeRequests().antMatchers(\"");
    String _path = authController.getPath();
    _builder.append(_path, "                ");
    _builder.append("/**\").permitAll()");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".anyRequest().authenticated().and()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".cors().and()");
    _builder.newLine();
    _builder.append("                ");
    _builder.append(".addFilterBefore(new TokenAuthenticationFilter(tokenUtils, userService), BasicAuthenticationFilter.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("http.csrf().disable();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public void configure(WebSecurity web) throws Exception {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("web.ignoring().antMatchers(HttpMethod.POST, \"");
    String _path_1 = authController.getPath();
    _builder.append(_path_1, "        ");
    String _loginEndpoint = SecurityDslGenerator.getLoginEndpoint(authController);
    _builder.append(_loginEndpoint, "        ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("web.ignoring().antMatchers(HttpMethod.GET, \"/\", \"/webjars/**\", \"/*.html\", \"favicon.ico\", \"/**/*.html\",");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("\"/**/*.css\", \"/**/*.js\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public String generateTokenUtils(final JWT jwt, final String credentialUser) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".util;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.util.Date;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.servlet.http.HttpServletRequest;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.springframework.beans.factory.annotation.Value;");
    _builder.newLine();
    _builder.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder.newLine();
    _builder.append("import org.springframework.stereotype.Component;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import io.jsonwebtoken.Claims;");
    _builder.newLine();
    _builder.append("import io.jsonwebtoken.ExpiredJwtException;");
    _builder.newLine();
    _builder.append("import io.jsonwebtoken.Jwts;");
    _builder.newLine();
    _builder.append("import io.jsonwebtoken.SignatureAlgorithm;");
    _builder.newLine();
    _builder.append("import ");
    _builder.append(this.packageName);
    _builder.append(".model.User;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("@Component");
    _builder.newLine();
    _builder.append("public class TokenUtils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String ISSUER = \"");
    String _value = SecurityDslGenerator.findClaimByName(jwt.getClaims(), "issuer").getValue();
    _builder.append(_value, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String SECRET = \"");
    String _secret = jwt.getSecret();
    _builder.append(_secret, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int EXPIRES_IN = ");
    String _value_1 = SecurityDslGenerator.findClaimByName(jwt.getClaims(), "expirationTime").getValue();
    _builder.append(_value_1, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Value(\"Authorization\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String AUTH_HEADER;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final String AUDIENCE_WEB = \"");
    Claim _findClaimByName = SecurityDslGenerator.findClaimByName(jwt.getClaims(), "audience");
    _builder.append(_findClaimByName, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("// Algoritam za potpisivanje JWT");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private SignatureAlgorithm SIGNATURE_ALGORITHM = SignatureAlgorithm.");
    String _signatureAlgorithm = jwt.getSignatureAlgorithm();
    _builder.append(_signatureAlgorithm, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String generateToken(String ");
    _builder.append(credentialUser, "\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return Jwts.builder()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".setIssuer(ISSUER)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".setSubject(");
    String _name = this.findSubjectClaim(jwt.getClaims()).getClaim_attribute().getName();
    _builder.append(_name, "\t\t\t\t");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append(".setAudience(generateAudience())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".setIssuedAt(new Date())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".setExpiration(generateExpirationDate())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".signWith(SIGNATURE_ALGORITHM, SECRET).compact();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String generateAudience() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return AUDIENCE_WEB;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Date generateExpirationDate() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new Date(new Date().getTime() + EXPIRES_IN);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getToken(HttpServletRequest request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String authHeader = getAuthHeaderFromHeader(request);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (authHeader != null && authHeader.startsWith(\"Bearer \")) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return authHeader.substring(7); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getCredentialFromToken(String token) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String credential;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("credential = claims.getSubject();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ExpiredJwtException ex) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ex;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("credential = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return credential;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Date getIssuedAtDateFromToken(String token) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Date issueAt;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("issueAt = claims.getIssuedAt();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ExpiredJwtException ex) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ex;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("issueAt = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return issueAt;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getAudienceFromToken(String token) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String audience;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audience = claims.getAudience();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ExpiredJwtException ex) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ex;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("audience = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return audience;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Date getExpirationDateFromToken(String token) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Date expiration;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("final Claims claims = this.getAllClaimsFromToken(token);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("expiration = claims.getExpiration();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ExpiredJwtException ex) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ex;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("expiration = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return expiration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Claims getAllClaimsFromToken(String token) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Claims claims;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("claims = Jwts.parser()");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".setSigningKey(SECRET)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".parseClaimsJws(token)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(".getBody();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (ExpiredJwtException ex) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw ex;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("claims = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return claims;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Boolean validateToken(String token, UserDetails userDetails) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("User user = (User) userDetails;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final String credential = getCredentialFromToken(token);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final Date created = getIssuedAtDateFromToken(token);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (credential != null ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("&& credential.equals(userDetails.get");
    String _firstUpper = StringExtensions.toFirstUpper(credentialUser);
    _builder.append(_firstUpper, "\t\t\t");
    _builder.append("()) ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("&& !isCreatedBeforeLastPasswordReset(created, user.getLastPasswordResetDate()));  ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Boolean isCreatedBeforeLastPasswordReset(Date created, Date lastPasswordReset) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return (lastPasswordReset != null && created.before(lastPasswordReset));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getExpiredIn() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return EXPIRES_IN;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getAuthHeaderFromHeader(HttpServletRequest request) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return request.getHeader(AUTH_HEADER);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateUserTokenStateDTO() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(this.packageName);
    _builder.append(".dto;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import lombok.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Getter");
    _builder.newLine();
    _builder.append("@Setter");
    _builder.newLine();
    _builder.append("@ToString");
    _builder.newLine();
    _builder.append("public class UserTokenStateDTO {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private String accessToken;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private Long expiresIn;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public UserTokenStateDTO() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.accessToken = null;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.expiresIn = null;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public UserTokenStateDTO(String accessToken, long expiresIn) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.accessToken = accessToken;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.expiresIn = expiresIn;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public Claim findSubjectClaim(final List<Claim> claims) {
    for (final Claim c : claims) {
      if ((Objects.equal(c.getType(), EClaimType.REGISTERED) && Objects.equal(c.getName().toLowerCase(), "subject"))) {
        return c;
      }
    }
    return null;
  }
}
