package org.xtext.securitydsl.generator;

import com.google.common.base.Objects;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import security_dsl.Application;
import security_dsl.BasicAuthentication;
import security_dsl.Database;
import security_dsl.EDatabaseType;
import security_dsl.JWT;
import security_dsl.Security;

@SuppressWarnings("all")
public class SecurityDslResourcesGenerator {
  public SecurityDslResourcesGenerator(final IFileSystemAccess2 fsa, final Application app) {
    String _artifact = app.getArtifact();
    String resourcesDest = (_artifact + "/src/main/resources/");
    fsa.generateFile((resourcesDest + "application.properties"), SecurityDslResourcesGenerator.generateApplicationProperties(app));
    String _artifact_1 = app.getArtifact();
    String _plus = (_artifact_1 + "/pom.xml");
    fsa.generateFile(_plus, this.generatePomXml(app));
  }

  public String generatePomXml(final Application app) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<modelVersion>4.0.0</modelVersion>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<parent>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<groupId>org.springframework.boot</groupId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<artifactId>spring-boot-starter-parent</artifactId>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<version>2.5.2</version>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<relativePath/> <!-- lookup parent from repository -->");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</parent>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<groupId>");
    String _group = app.getGroup();
    String _plus = (_builder.toString() + _group);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("</groupId>");
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    String _content = content;
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("\t");
    _builder_2.append("<artifactId>");
    String _artifact = app.getArtifact();
    String _plus_1 = (_builder_2.toString() + _artifact);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("</artifactId>");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("<version>0.0.1-SNAPSHOT</version>");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("<name>");
    String _plus_2 = (_plus_1 + _builder_3);
    String _name = app.getName();
    String _plus_3 = (_plus_2 + _name);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append("</name>");
    _builder_4.newLine();
    _builder_4.append("\t");
    _builder_4.append("<description>");
    String _plus_4 = (_plus_3 + _builder_4);
    String _description = app.getDescription();
    String _plus_5 = (_plus_4 + _description);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append("</description>");
    _builder_5.newLine();
    _builder_5.append("\t");
    _builder_5.append("<properties>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("<java.version>11</java.version>");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("</properties>");
    _builder_5.newLine();
    _builder_5.append("\t\t");
    _builder_5.append("<dependencies>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("<dependency>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<groupId>org.springframework.boot</groupId>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<artifactId>spring-boot-starter-data-jpa</artifactId>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("</dependency>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("<dependency>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<groupId>org.springframework.boot</groupId>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<artifactId>spring-boot-starter-web</artifactId>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("</dependency>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("<dependency>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<groupId>org.springframework.boot</groupId>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<artifactId>spring-boot-devtools</artifactId>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<scope>runtime</scope>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t\t");
    _builder_5.append("<optional>true</optional>");
    _builder_5.newLine();
    _builder_5.append("\t\t\t");
    _builder_5.append("</dependency>");
    _builder_5.newLine();
    String _plus_6 = (_plus_5 + _builder_5);
    content = (_content + _plus_6);
    String databaseDependency = "";
    Database _app_database = app.getApp_database();
    EDatabaseType _vendorName = null;
    if (_app_database!=null) {
      _vendorName=_app_database.getVendorName();
    }
    if (_vendorName != null) {
      switch (_vendorName) {
        case MY_SQL:
          StringConcatenation _builder_6 = new StringConcatenation();
          _builder_6.append("\t\t\t");
          _builder_6.append("<dependency>");
          _builder_6.newLine();
          _builder_6.append("\t\t\t    ");
          _builder_6.append("<groupId>mysql</groupId>");
          _builder_6.newLine();
          _builder_6.append("\t\t\t    ");
          _builder_6.append("<artifactId>mysql-connector-java</artifactId>");
          _builder_6.newLine();
          _builder_6.append("\t\t\t");
          _builder_6.append("</dependency>");
          _builder_6.newLine();
          databaseDependency = _builder_6.toString();
          break;
        case POSTGRE_SQL:
          StringConcatenation _builder_7 = new StringConcatenation();
          _builder_7.append("\t\t\t");
          _builder_7.append("<dependency>");
          _builder_7.newLine();
          _builder_7.append("\t\t\t\t");
          _builder_7.append("<groupId>org.postgresql</groupId>");
          _builder_7.newLine();
          _builder_7.append("\t\t\t\t");
          _builder_7.append("<artifactId>postgresql</artifactId>");
          _builder_7.newLine();
          _builder_7.append("\t\t\t");
          _builder_7.append("</dependency>");
          _builder_7.newLine();
          databaseDependency = _builder_7.toString();
          break;
        case ORACLE:
          StringConcatenation _builder_8 = new StringConcatenation();
          _builder_8.append("\t\t\t");
          _builder_8.append("<dependency>");
          _builder_8.newLine();
          _builder_8.append("\t\t\t\t");
          _builder_8.append("<groupId>com.oracle.database.jdbc</groupId>");
          _builder_8.newLine();
          _builder_8.append("\t\t\t\t");
          _builder_8.append("<artifactId>ojdbc8</artifactId>");
          _builder_8.newLine();
          _builder_8.append("\t\t\t");
          _builder_8.append("</dependency>");
          _builder_8.newLine();
          databaseDependency = _builder_8.toString();
          break;
        default:
          break;
      }
    }
    String securityDependency = "";
    Security _app_security = app.getApp_security();
    if ((_app_security instanceof BasicAuthentication)) {
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("\t\t\t");
      _builder_9.append("<dependency>");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("<groupId>org.springframework.boot</groupId>");
      _builder_9.newLine();
      _builder_9.append("\t\t\t\t");
      _builder_9.append("<artifactId>spring-boot-starter-security</artifactId>");
      _builder_9.newLine();
      _builder_9.append("\t\t\t");
      _builder_9.append("</dependency>");
      _builder_9.newLine();
      securityDependency = _builder_9.toString();
    } else {
      Security _app_security_1 = app.getApp_security();
      if ((_app_security_1 instanceof JWT)) {
        String _securityDependency = securityDependency;
        StringConcatenation _builder_10 = new StringConcatenation();
        _builder_10.append("\t\t\t");
        _builder_10.append("<dependency>");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t");
        _builder_10.append("<groupId>io.jsonwebtoken</groupId>");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t");
        _builder_10.append("<artifactId>jjwt</artifactId>");
        _builder_10.newLine();
        _builder_10.append("\t\t\t\t");
        _builder_10.append("<version>0.6.0</version>");
        _builder_10.newLine();
        _builder_10.append("\t\t\t");
        _builder_10.append("</dependency>");
        _builder_10.newLine();
        securityDependency = (_securityDependency + _builder_10);
      }
    }
    String _content_1 = content;
    StringConcatenation _builder_11 = new StringConcatenation();
    String _plus_7 = (_builder_11.toString() + databaseDependency);
    StringConcatenation _builder_12 = new StringConcatenation();
    String _plus_8 = (_plus_7 + _builder_12);
    String _plus_9 = (_plus_8 + securityDependency);
    StringConcatenation _builder_13 = new StringConcatenation();
    String _plus_10 = (_plus_9 + _builder_13);
    content = (_content_1 + _plus_10);
    String _content_2 = content;
    StringConcatenation _builder_14 = new StringConcatenation();
    _builder_14.append("\t\t\t");
    _builder_14.append("<dependency>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<groupId>org.projectlombok</groupId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<artifactId>lombok</artifactId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<optional>true</optional>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("</dependency>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("<dependency>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<groupId>org.springframework.boot</groupId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<artifactId>spring-boot-starter-test</artifactId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<scope>test</scope>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("</dependency>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("<dependency>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<groupId>org.modelmapper</groupId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<artifactId>modelmapper</artifactId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<version>2.4.4</version>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("</dependency>");
    _builder_14.newLine();
    _builder_14.append("\t\t");
    _builder_14.append("</dependencies>");
    _builder_14.newLine();
    _builder_14.append("\t\t");
    _builder_14.append("<build>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("<plugins>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("<plugin>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t");
    _builder_14.append("<groupId>org.springframework.boot</groupId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t");
    _builder_14.append("<artifactId>spring-boot-maven-plugin</artifactId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t");
    _builder_14.append("<configuration>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t\t");
    _builder_14.append("<excludes>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t\t\t");
    _builder_14.append("<exclude>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t\t\t\t");
    _builder_14.append("<groupId>org.projectlombok</groupId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t\t\t\t");
    _builder_14.append("<artifactId>lombok</artifactId>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t\t\t");
    _builder_14.append("</exclude>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t\t");
    _builder_14.append("</excludes>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t\t");
    _builder_14.append("</configuration>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("</plugin>");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append("</plugins>");
    _builder_14.newLine();
    _builder_14.append("\t\t");
    _builder_14.append("</build>");
    _builder_14.newLine();
    _builder_14.append("\t");
    _builder_14.newLine();
    _builder_14.append("\t");
    _builder_14.append("</project>");
    _builder_14.newLine();
    _builder_14.append("\t");
    _builder_14.newLine();
    content = (_content_2 + _builder_14);
    return content;
  }

  public static String generateApplicationProperties(final Application app) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("sprint.application.name=");
    String _name = app.getName();
    String _plus = (_builder.toString() + _name);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.newLine();
    _builder_1.append("server.port=");
    String _plus_1 = (_plus + _builder_1);
    Long _port = app.getPort();
    String _plus_2 = (_plus_1 + _port);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.newLine();
    _builder_2.append("server.hostname=");
    String _plus_3 = (_plus_2 + _builder_2);
    String _hostname = app.getHostname();
    String _plus_4 = (_plus_3 + _hostname);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("      ");
    _builder_3.newLine();
    _builder_3.append("      ");
    _builder_3.newLine();
    String propertiesContent = (_plus_4 + _builder_3);
    Database _app_database = app.getApp_database();
    boolean _tripleNotEquals = (_app_database != null);
    if (_tripleNotEquals) {
      Database database = app.getApp_database();
      EDatabaseType _vendorName = null;
      if (database!=null) {
        _vendorName=database.getVendorName();
      }
      boolean _equals = Objects.equal(_vendorName, EDatabaseType.POSTGRE_SQL);
      if (_equals) {
        String _propertiesContent = propertiesContent;
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("spring.datasource.driverClassName=org.postgresql.Driver");
        _builder_4.newLine();
        _builder_4.append("spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect");
        _builder_4.newLine();
        _builder_4.newLine();
        _builder_4.append("spring.datasource.initialization-mode=always");
        _builder_4.newLine();
        _builder_4.append("spring.datasource.url=jdbc:postgresql://");
        propertiesContent = (_propertiesContent + _builder_4);
      } else {
        EDatabaseType _vendorName_1 = null;
        if (database!=null) {
          _vendorName_1=database.getVendorName();
        }
        boolean _equals_1 = Objects.equal(_vendorName_1, EDatabaseType.MY_SQL);
        if (_equals_1) {
          String _propertiesContent_1 = propertiesContent;
          StringConcatenation _builder_5 = new StringConcatenation();
          _builder_5.append("spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver");
          _builder_5.newLine();
          _builder_5.append("spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialec");
          _builder_5.newLine();
          _builder_5.newLine();
          _builder_5.append("spring.datasource.initialization-mode=always");
          _builder_5.newLine();
          _builder_5.append("spring.datasource.url=jdbc:mysql://");
          propertiesContent = (_propertiesContent_1 + _builder_5);
        } else {
          EDatabaseType _vendorName_2 = null;
          if (database!=null) {
            _vendorName_2=database.getVendorName();
          }
          boolean _equals_2 = Objects.equal(_vendorName_2, EDatabaseType.ORACLE);
          if (_equals_2) {
            String _propertiesContent_2 = propertiesContent;
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append("spring.datasource.driverClassName=oracle.jdbc.driver.OracleDriver");
            _builder_6.newLine();
            _builder_6.append("spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.Oracle12cDialect");
            _builder_6.newLine();
            _builder_6.newLine();
            _builder_6.append("spring.datasource.initialization-mode=always ");
            _builder_6.newLine();
            _builder_6.append("spring.datasource.url=jdbc:oracle:thin:@");
            propertiesContent = (_propertiesContent_2 + _builder_6);
          }
        }
      }
      String _propertiesContent_3 = propertiesContent;
      String _url = database.getUrl();
      StringConcatenation _builder_7 = new StringConcatenation();
      _builder_7.newLine();
      _builder_7.append("spring.datasource.username=");
      String _plus_5 = (_url + _builder_7);
      String _username = database.getUsername();
      String _plus_6 = (_plus_5 + _username);
      StringConcatenation _builder_8 = new StringConcatenation();
      _builder_8.newLine();
      _builder_8.append("spring.datasource.password=");
      String _plus_7 = (_plus_6 + _builder_8);
      String _password = database.getPassword();
      String _plus_8 = (_plus_7 + _password);
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.newLine();
      _builder_9.newLine();
      _builder_9.append("spring.jpa.show-sql=true");
      _builder_9.newLine();
      _builder_9.append("spring.jpa.hibernate.ddl-auto=create-drop");
      _builder_9.newLine();
      _builder_9.append("spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true");
      _builder_9.newLine();
      String _plus_9 = (_plus_8 + _builder_9);
      propertiesContent = (_propertiesContent_3 + _plus_9);
    }
    return propertiesContent;
  }
}
