package org.xtext.securitydsl.generator;

import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import security_dsl.Application;

@SuppressWarnings("all")
public class SecurityDslStaticFilesGenerator {
  public SecurityDslStaticFilesGenerator(final IFileSystemAccess2 fsa, final Application app, final String capitalizedName, final String srcDestination) {
    fsa.generateFile(((srcDestination + capitalizedName) + "Application.java"), SecurityDslStaticFilesGenerator.mainClassGenerator(app.getPackageName(), (capitalizedName + "Application")));
    String _artifact = app.getArtifact();
    String _plus = (_artifact + "/README.md");
    fsa.generateFile(_plus, app.getDescription());
    String _replace = srcDestination.replace("main", "test");
    String _plus_1 = (_replace + capitalizedName);
    String _plus_2 = (_plus_1 + "ApplicationTests.java");
    fsa.generateFile(_plus_2, this.generateTests(app.getPackageName(), (capitalizedName + "Tests")));
    String _artifact_1 = app.getArtifact();
    String _plus_3 = (_artifact_1 + "/.mvn/wrapper/MavenWrapperDownloader.java");
    fsa.generateFile(_plus_3, this.generateMavenWrappaerDownloader());
    String _artifact_2 = app.getArtifact();
    String _plus_4 = (_artifact_2 + "/.mvn/wrapper/maven-wrapper.properties");
    fsa.generateFile(_plus_4, this.genMavenWrapperProperties());
    String _artifact_3 = app.getArtifact();
    String _plus_5 = (_artifact_3 + "/mvnw");
    fsa.generateFile(_plus_5, this.generateMvnw());
    String _artifact_4 = app.getArtifact();
    String _plus_6 = (_artifact_4 + "/mvnw.cmd");
    fsa.generateFile(_plus_6, this.generateMvnwCmd());
  }

  public CharSequence genMavenWrapperProperties() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.8.5/apache-maven-3.8.5-bin.zip");
    _builder.newLine();
    _builder.append("wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.1.0/maven-wrapper-3.1.0.jar");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateMavenWrappaerDownloader() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.net.*;");
    _builder.newLine();
    _builder.append("import java.io.*;");
    _builder.newLine();
    _builder.append("import java.nio.channels.*;");
    _builder.newLine();
    _builder.append("import java.util.Properties;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class MavenWrapperDownloader {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final String WRAPPER_VERSION = \"0.5.6\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Default URL to download the maven-wrapper.jar from, if no \'downloadUrl\' is provided.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final String DEFAULT_DOWNLOAD_URL = \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("+ WRAPPER_VERSION + \"/maven-wrapper-\" + WRAPPER_VERSION + \".jar\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Path to the maven-wrapper.properties file, which might contain a downloadUrl property to");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* use instead of the default one.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final String MAVEN_WRAPPER_PROPERTIES_PATH =");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\".mvn/wrapper/maven-wrapper.properties\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Path where the maven-wrapper.jar will be saved to.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final String MAVEN_WRAPPER_JAR_PATH =");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("\".mvn/wrapper/maven-wrapper.jar\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("* Name of the property which should be used to override the default download url for the wrapper.");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("public static void main(String args[]) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\"- Downloader started\");");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("File baseDirectory = new File(args[0]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// If the maven-wrapper.properties exists, read it and check if it contains a custom");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// wrapperUrl parameter.");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("String url = DEFAULT_DOWNLOAD_URL;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(mavenWrapperPropertyFile.exists()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("FileInputStream mavenWrapperPropertyFileInputStream = null;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Properties mavenWrapperProperties = new Properties();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.println(\"- ERROR loading \'\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"\'\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if(mavenWrapperPropertyFileInputStream != null) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("mavenWrapperPropertyFileInputStream.close();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("// Ignore ...");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\"- Downloading from: \" + url);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(!outputFile.getParentFile().exists()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if(!outputFile.getParentFile().mkdirs()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("System.out.println(");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\"- ERROR creating output directory \'\" + outputFile.getParentFile().getAbsolutePath() + \"\'\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("downloadFileFromURL(url, outputFile);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.out.println(\"Done\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.exit(0);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (Throwable e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.out.println(\"- Error downloading\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("System.exit(1);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("private static void downloadFileFromURL(String urlString, File destination) throws Exception {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (System.getenv(\"MVNW_USERNAME\") != null && System.getenv(\"MVNW_PASSWORD\") != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("String username = System.getenv(\"MVNW_USERNAME\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("char[] password = System.getenv(\"MVNW_PASSWORD\").toCharArray();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Authenticator.setDefault(new Authenticator() {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("protected PasswordAuthentication getPasswordAuthentication() {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return new PasswordAuthentication(username, password);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("URL website = new URL(urlString);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReadableByteChannel rbc;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("rbc = Channels.newChannel(website.openStream());");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("FileOutputStream fos = new FileOutputStream(destination);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fos.close();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("rbc.close();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public static String mainClassGenerator(final String packageName, final String appName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.springframework.boot.SpringApplication;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.autoconfigure.SpringBootApplication;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SpringBootApplication");
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(appName);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SpringApplication.run(");
    _builder.append(appName, "\t\t");
    _builder.append(".class, args);");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public String generateTests(final String packageName, final String appName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    _builder.append(packageName);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import org.junit.jupiter.api.Test;");
    _builder.newLine();
    _builder.append("import org.springframework.boot.test.context.SpringBootTest;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@SpringBootTest");
    _builder.newLine();
    _builder.append("class ");
    _builder.append(appName);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Test");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void contextLoads() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }

  public CharSequence generateMavenWrapperJar() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("PK");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateMvnw() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if [ -z \"$MAVEN_SKIP_RC\" ] ; then");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -f /etc/mavenrc ] ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(". /etc/mavenrc");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -f \"$HOME/.mavenrc\" ] ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(". \"$HOME/.mavenrc\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# OS specific support.  $var _must_ be set to either true or false.");
    _builder.newLine();
    _builder.append("cygwin=false;");
    _builder.newLine();
    _builder.append("darwin=false;");
    _builder.newLine();
    _builder.append("mingw=false");
    _builder.newLine();
    _builder.append("case \"`uname`\" in");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("CYGWIN*) cygwin=true ;;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("MINGW*) mingw=true;;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("Darwin*) darwin=true");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# Use /usr/libexec/java_home if available, otherwise fall back to /Library/Java/Home");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# See https://developer.apple.com/library/mac/qa/qa1170/_index.html");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ -z \"$JAVA_HOME\" ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if [ -x \"/usr/libexec/java_home\" ]; then");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("export JAVA_HOME=\"`/usr/libexec/java_home`\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("export JAVA_HOME=\"/Library/Java/Home\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(";;");
    _builder.newLine();
    _builder.append("esac");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if [ -z \"$JAVA_HOME\" ] ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -r /etc/gentoo-release ] ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVA_HOME=`java-config --jre-home`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if [ -z \"$M2_HOME\" ] ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("## resolve links - $0 may be a link to maven\'s home");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("PRG=\"$0\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("# need this for relative symlinks");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("while [ -h \"$PRG\" ] ; do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("ls=`ls -ld \"$PRG\"`");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("link=`expr \"$ls\" : \'.*-> \\(.*\\)$\'`");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if expr \"$link\" : \'/.*\' > /dev/null; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("PRG=\"$link\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("PRG=\"`dirname \"$PRG\"`/$link\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("done");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("saveddir=`pwd`");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("M2_HOME=`dirname \"$PRG\"`/..");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("# make it fully qualified");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("M2_HOME=`cd \"$M2_HOME\" && pwd`");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("cd \"$saveddir\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("# echo Using m2 at $M2_HOME");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# For Cygwin, ensure paths are in UNIX format before anything is touched");
    _builder.newLine();
    _builder.append("if $cygwin ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$M2_HOME\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("M2_HOME=`cygpath --unix \"$M2_HOME\"`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$JAVA_HOME\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$CLASSPATH\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CLASSPATH=`cygpath --path --unix \"$CLASSPATH\"`");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# For Mingw, ensure paths are in UNIX format before anything is touched");
    _builder.newLine();
    _builder.append("if $mingw ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$M2_HOME\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("M2_HOME=\"`(cd \"$M2_HOME\"; pwd)`\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$JAVA_HOME\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if [ -z \"$JAVA_HOME\" ]; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("javaExecutable=\"`which javac`\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -n \"$javaExecutable\" ] && ! [ \"`expr \\\"$javaExecutable\\\" : \'\\([^ ]*\\)\'`\" = \"no\" ]; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# readlink(1) is not available as standard on Solaris 10.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("readLink=`which readlink`");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ ! `expr \"$readLink\" : \'\\([^ ]*\\)\'` = \"no\" ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("if $darwin ; then");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("javaHome=\"`dirname \\\"$javaExecutable\\\"`\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("javaExecutable=\"`cd \\\"$javaHome\\\" && pwd -P`/javac\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("javaExecutable=\"`readlink -f \\\"$javaExecutable\\\"`\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("javaHome=\"`dirname \\\"$javaExecutable\\\"`\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("javaHome=`expr \"$javaHome\" : \'\\(.*\\)/bin\'`");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("JAVA_HOME=\"$javaHome\"");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("export JAVA_HOME");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if [ -z \"$JAVACMD\" ] ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -n \"$JAVA_HOME\"  ] ; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("# IBM\'s JDK on AIX uses strange locations for the executables");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("JAVACMD=\"$JAVA_HOME/jre/sh/java\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("JAVACMD=\"$JAVA_HOME/bin/java\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVACMD=\"`which java`\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if [ ! -x \"$JAVACMD\" ] ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("echo \"Error: JAVA_HOME is not defined correctly.\" >&2");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("echo \"  We cannot execute $JAVACMD\" >&2");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exit 1");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if [ -z \"$JAVA_HOME\" ] ; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("echo \"Warning: JAVA_HOME environment variable is not set.\"");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("CLASSWORLDS_LAUNCHER=org.codehaus.plexus.classworlds.launcher.Launcher");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# traverses directory structure from process work directory to filesystem root");
    _builder.newLine();
    _builder.append("# first directory with .mvn subdirectory is considered project base directory");
    _builder.newLine();
    _builder.append("find_maven_basedir() {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -z \"$1\" ]");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("echo \"Path not specified to find_maven_basedir\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return 1");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("basedir=\"$1\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("wdir=\"$1\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("while [ \"$wdir\" != \'/\' ] ; do");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ -d \"$wdir\"/.mvn ] ; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("basedir=$wdir");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("break");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# workaround for JBEAP-8937 (on Solaris 10/Sparc)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ -d \"${wdir}\" ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("wdir=`cd \"$wdir/..\"; pwd`");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("# end of workaround");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("done");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("echo \"${basedir}\"");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# concatenates all lines of a file");
    _builder.newLine();
    _builder.append("concat_lines() {");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("if [ -f \"$1\" ]; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("echo \"$(tr -s \'\\n\' \' \' < \"$1\")\"");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("BASE_DIR=`find_maven_basedir \"$(pwd)\"`");
    _builder.newLine();
    _builder.append("if [ -z \"$BASE_DIR\" ]; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("exit 1;");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("##########################################################################################");
    _builder.newLine();
    _builder.append("# Extension to allow automatically downloading the maven-wrapper.jar from Maven-central");
    _builder.newLine();
    _builder.append("# This allows using the maven wrapper in projects that prohibit checking in binary data.");
    _builder.newLine();
    _builder.append("##########################################################################################");
    _builder.newLine();
    _builder.append("if [ -r \"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\" ]; then");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("echo \"Found .mvn/wrapper/maven-wrapper.jar\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("else");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("echo \"Couldn\'t find .mvn/wrapper/maven-wrapper.jar, downloading it ...\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ -n \"$MVNW_REPOURL\" ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("jarUrl=\"$MVNW_REPOURL/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("jarUrl=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("while IFS=\"=\" read key value; do");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("case \"$key\" in (wrapperUrl) jarUrl=\"$value\"; break ;;");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("esac");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("done < \"$BASE_DIR/.mvn/wrapper/maven-wrapper.properties\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("echo \"Downloading from: $jarUrl\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("wrapperJarPath=\"$BASE_DIR/.mvn/wrapper/maven-wrapper.jar\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if $cygwin; then");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("wrapperJarPath=`cygpath --path --windows \"$wrapperJarPath\"`");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if command -v wget > /dev/null; then");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("echo \"Found wget ... using wget\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("wget \"$jarUrl\" -O \"$wrapperJarPath\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("wget --http-user=$MVNW_USERNAME --http-password=$MVNW_PASSWORD \"$jarUrl\" -O \"$wrapperJarPath\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("elif command -v curl > /dev/null; then");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("echo \"Found curl ... using curl\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if [ -z \"$MVNW_USERNAME\" ] || [ -z \"$MVNW_PASSWORD\" ]; then");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("curl -o \"$wrapperJarPath\" \"$jarUrl\" -f");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("curl --user $MVNW_USERNAME:$MVNW_PASSWORD -o \"$wrapperJarPath\" \"$jarUrl\" -f");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("else");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("echo \"Falling back to using Java to download\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("javaClass=\"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.java\"");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("# For Cygwin, switch paths to Windows format before running javac");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if $cygwin; then");
    _builder.newLine();
    _builder.append("          ");
    _builder.append("javaClass=`cygpath --path --windows \"$javaClass\"`");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if [ -e \"$javaClass\" ]; then");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if [ ! -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("echo \" - Compiling MavenWrapperDownloader.java ...\"");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("# Compiling the Java class");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("(\"$JAVA_HOME/bin/javac\" \"$javaClass\")");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if [ -e \"$BASE_DIR/.mvn/wrapper/MavenWrapperDownloader.class\" ]; then");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("# Running the downloader");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("                  ");
    _builder.append("echo \" - Running MavenWrapperDownloader.java ...\"");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("(\"$JAVA_HOME/bin/java\" -cp .mvn/wrapper MavenWrapperDownloader \"$MAVEN_PROJECTBASEDIR\")");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("fi");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.append("##########################################################################################");
    _builder.newLine();
    _builder.append("# End of extension");
    _builder.newLine();
    _builder.append("##########################################################################################");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export MAVEN_PROJECTBASEDIR=${MAVEN_BASEDIR:-\"$BASE_DIR\"}");
    _builder.newLine();
    _builder.append("if [ \"$MVNW_VERBOSE\" = true ]; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("echo $MAVEN_PROJECTBASEDIR");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.append("MAVEN_OPTS=\"$(concat_lines \"$MAVEN_PROJECTBASEDIR/.mvn/jvm.config\") $MAVEN_OPTS\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# For Cygwin, switch paths to Windows format before running java");
    _builder.newLine();
    _builder.append("if $cygwin; then");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$M2_HOME\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("M2_HOME=`cygpath --path --windows \"$M2_HOME\"`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$JAVA_HOME\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("JAVA_HOME=`cygpath --path --windows \"$JAVA_HOME\"`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$CLASSPATH\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("CLASSPATH=`cygpath --path --windows \"$CLASSPATH\"`");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("[ -n \"$MAVEN_PROJECTBASEDIR\" ] &&");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("MAVEN_PROJECTBASEDIR=`cygpath --path --windows \"$MAVEN_PROJECTBASEDIR\"`");
    _builder.newLine();
    _builder.append("fi");
    _builder.newLine();
    _builder.newLine();
    _builder.append("# Provide a \"standardized\" way to retrieve the CLI args that will");
    _builder.newLine();
    _builder.append("# work with both Windows and non-Windows executions.");
    _builder.newLine();
    _builder.append("MAVEN_CMD_LINE_ARGS=\"$MAVEN_CONFIG $@\"");
    _builder.newLine();
    _builder.append("export MAVEN_CMD_LINE_ARGS");
    _builder.newLine();
    _builder.newLine();
    _builder.append("WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain");
    _builder.newLine();
    _builder.newLine();
    _builder.append("exec \"$JAVACMD\" \\");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("$MAVEN_OPTS \\");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("-classpath \"$MAVEN_PROJECTBASEDIR/.mvn/wrapper/maven-wrapper.jar\" \\");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("\"-Dmaven.home=${M2_HOME}\" \"-Dmaven.multiModuleProjectDirectory=${MAVEN_PROJECTBASEDIR}\" \\");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("${WRAPPER_LAUNCHER} $MAVEN_CONFIG \"$@\"");
    _builder.newLine();
    return _builder;
  }

  public CharSequence generateMvnwCmd() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@REM ----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("@REM Licensed to the Apache Software Foundation (ASF) under one");
    _builder.newLine();
    _builder.append("@REM or more contributor license agreements.  See the NOTICE file");
    _builder.newLine();
    _builder.append("@REM distributed with this work for additional information");
    _builder.newLine();
    _builder.append("@REM regarding copyright ownership.  The ASF licenses this file");
    _builder.newLine();
    _builder.append("@REM to you under the Apache License, Version 2.0 (the");
    _builder.newLine();
    _builder.append("@REM \"License\"); you may not use this file except in compliance");
    _builder.newLine();
    _builder.append("@REM with the License.  You may obtain a copy of the License at");
    _builder.newLine();
    _builder.append("@REM");
    _builder.newLine();
    _builder.append("@REM    https://www.apache.org/licenses/LICENSE-2.0");
    _builder.newLine();
    _builder.append("@REM");
    _builder.newLine();
    _builder.append("@REM Unless required by applicable law or agreed to in writing,");
    _builder.newLine();
    _builder.append("@REM software distributed under the License is distributed on an");
    _builder.newLine();
    _builder.append("@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY");
    _builder.newLine();
    _builder.append("@REM KIND, either express or implied.  See the License for the");
    _builder.newLine();
    _builder.append("@REM specific language governing permissions and limitations");
    _builder.newLine();
    _builder.append("@REM under the License.");
    _builder.newLine();
    _builder.append("@REM ----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM ----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.append("@REM Maven Start Up Batch script");
    _builder.newLine();
    _builder.append("@REM");
    _builder.newLine();
    _builder.append("@REM Required ENV vars:");
    _builder.newLine();
    _builder.append("@REM JAVA_HOME - location of a JDK home dir");
    _builder.newLine();
    _builder.append("@REM");
    _builder.newLine();
    _builder.append("@REM Optional ENV vars");
    _builder.newLine();
    _builder.append("@REM M2_HOME - location of maven2\'s installed home dir");
    _builder.newLine();
    _builder.append("@REM MAVEN_BATCH_ECHO - set to \'on\' to enable the echoing of the batch commands");
    _builder.newLine();
    _builder.append("@REM MAVEN_BATCH_PAUSE - set to \'on\' to wait for a keystroke before ending");
    _builder.newLine();
    _builder.append("@REM MAVEN_OPTS - parameters passed to the Java VM when running Maven");
    _builder.newLine();
    _builder.append("@REM     e.g. to debug Maven itself, use");
    _builder.newLine();
    _builder.append("@REM set MAVEN_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000");
    _builder.newLine();
    _builder.append("@REM MAVEN_SKIP_RC - flag to disable loading of mavenrc files");
    _builder.newLine();
    _builder.append("@REM ----------------------------------------------------------------------------");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM Begin all REM lines with \'@\' in case MAVEN_BATCH_ECHO is \'on\'");
    _builder.newLine();
    _builder.append("@echo off");
    _builder.newLine();
    _builder.append("@REM set title of command window");
    _builder.newLine();
    _builder.append("title %0");
    _builder.newLine();
    _builder.append("@REM enable echoing by setting MAVEN_BATCH_ECHO to \'on\'");
    _builder.newLine();
    _builder.append("@if \"%MAVEN_BATCH_ECHO%\" == \"on\"  echo %MAVEN_BATCH_ECHO%");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM set %HOME% to equivalent of $HOME");
    _builder.newLine();
    _builder.append("if \"%HOME%\" == \"\" (set \"HOME=%HOMEDRIVE%%HOMEPATH%\")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM Execute a user defined script before this one");
    _builder.newLine();
    _builder.append("if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPre");
    _builder.newLine();
    _builder.append("@REM check for pre script, once with legacy .bat ending and once with .cmd ending");
    _builder.newLine();
    _builder.append("if exist \"%HOME%\\mavenrc_pre.bat\" call \"%HOME%\\mavenrc_pre.bat\"");
    _builder.newLine();
    _builder.append("if exist \"%HOME%\\mavenrc_pre.cmd\" call \"%HOME%\\mavenrc_pre.cmd\"");
    _builder.newLine();
    _builder.append(":skipRcPre");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@setlocal");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set ERROR_CODE=0");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM To isolate internal variables from possible post scripts, we use another setlocal");
    _builder.newLine();
    _builder.append("@setlocal");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM ==== START VALIDATION ====");
    _builder.newLine();
    _builder.append("if not \"%JAVA_HOME%\" == \"\" goto OkJHome");
    _builder.newLine();
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("echo Error: JAVA_HOME not found in your environment. >&2");
    _builder.newLine();
    _builder.append("echo Please set the JAVA_HOME variable in your environment to match the >&2");
    _builder.newLine();
    _builder.append("echo location of your Java installation. >&2");
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("goto error");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":OkJHome");
    _builder.newLine();
    _builder.append("if exist \"%JAVA_HOME%\\bin\\java.exe\" goto init");
    _builder.newLine();
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("echo Error: JAVA_HOME is set to an invalid directory. >&2");
    _builder.newLine();
    _builder.append("echo JAVA_HOME = \"%JAVA_HOME%\" >&2");
    _builder.newLine();
    _builder.append("echo Please set the JAVA_HOME variable in your environment to match the >&2");
    _builder.newLine();
    _builder.append("echo location of your Java installation. >&2");
    _builder.newLine();
    _builder.append("echo.");
    _builder.newLine();
    _builder.append("goto error");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM ==== END VALIDATION ====");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":init");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM Find the project base dir, i.e. the directory that contains the folder \".mvn\".");
    _builder.newLine();
    _builder.append("@REM Fallback to current working directory if not found.");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set MAVEN_PROJECTBASEDIR=%MAVEN_BASEDIR%");
    _builder.newLine();
    _builder.append("IF NOT \"%MAVEN_PROJECTBASEDIR%\"==\"\" goto endDetectBaseDir");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set EXEC_DIR=%CD%");
    _builder.newLine();
    _builder.append("set WDIR=%EXEC_DIR%");
    _builder.newLine();
    _builder.append(":findBaseDir");
    _builder.newLine();
    _builder.append("IF EXIST \"%WDIR%\"\\.mvn goto baseDirFound");
    _builder.newLine();
    _builder.append("cd ..");
    _builder.newLine();
    _builder.append("IF \"%WDIR%\"==\"%CD%\" goto baseDirNotFound");
    _builder.newLine();
    _builder.append("set WDIR=%CD%");
    _builder.newLine();
    _builder.append("goto findBaseDir");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":baseDirFound");
    _builder.newLine();
    _builder.append("set MAVEN_PROJECTBASEDIR=%WDIR%");
    _builder.newLine();
    _builder.append("cd \"%EXEC_DIR%\"");
    _builder.newLine();
    _builder.append("goto endDetectBaseDir");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":baseDirNotFound");
    _builder.newLine();
    _builder.append("set MAVEN_PROJECTBASEDIR=%EXEC_DIR%");
    _builder.newLine();
    _builder.append("cd \"%EXEC_DIR%\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":endDetectBaseDir");
    _builder.newLine();
    _builder.newLine();
    _builder.append("IF NOT EXIST \"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\" goto endReadAdditionalConfig");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@setlocal EnableExtensions EnableDelayedExpansion");
    _builder.newLine();
    _builder.append("for /F \"usebackq delims=\" %%a in (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\jvm.config\") do set JVM_CONFIG_MAVEN_PROPS=!JVM_CONFIG_MAVEN_PROPS! %%a");
    _builder.newLine();
    _builder.append("@endlocal & set JVM_CONFIG_MAVEN_PROPS=%JVM_CONFIG_MAVEN_PROPS%");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":endReadAdditionalConfig");
    _builder.newLine();
    _builder.newLine();
    _builder.append("SET MAVEN_JAVA_EXE=\"%JAVA_HOME%\\bin\\java.exe\"");
    _builder.newLine();
    _builder.append("set WRAPPER_JAR=\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.jar\"");
    _builder.newLine();
    _builder.append("set WRAPPER_LAUNCHER=org.apache.maven.wrapper.MavenWrapperMain");
    _builder.newLine();
    _builder.newLine();
    _builder.append("set DOWNLOAD_URL=\"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"");
    _builder.newLine();
    _builder.newLine();
    _builder.append("FOR /F \"tokens=1,2 delims==\" %%A IN (\"%MAVEN_PROJECTBASEDIR%\\.mvn\\wrapper\\maven-wrapper.properties\") DO (");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("IF \"%%A\"==\"wrapperUrl\" SET DOWNLOAD_URL=%%B");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM Extension to allow automatically downloading the maven-wrapper.jar from Maven-central");
    _builder.newLine();
    _builder.append("@REM This allows using the maven wrapper in projects that prohibit checking in binary data.");
    _builder.newLine();
    _builder.append("if exist %WRAPPER_JAR% (");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if \"%MVNW_VERBOSE%\" == \"true\" (");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("echo Found %WRAPPER_JAR%");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append(") else (");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if not \"%MVNW_REPOURL%\" == \"\" (");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("SET DOWNLOAD_URL=\"%MVNW_REPOURL%/io/takari/maven-wrapper/0.5.6/maven-wrapper-0.5.6.jar\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if \"%MVNW_VERBOSE%\" == \"true\" (");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("echo Couldn\'t find %WRAPPER_JAR%, downloading it ...");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("echo Downloading from: %DOWNLOAD_URL%");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("powershell -Command \"&{\"^");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"$webclient = new-object System.Net.WebClient;\"^");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"if (-not ([string]::IsNullOrEmpty(\'%MVNW_USERNAME%\') -and [string]::IsNullOrEmpty(\'%MVNW_PASSWORD%\'))) {\"^");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"$webclient.Credentials = new-object System.Net.NetworkCredential(\'%MVNW_USERNAME%\', \'%MVNW_PASSWORD%\');\"^");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"}\"^");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $webclient.DownloadFile(\'%DOWNLOAD_URL%\', \'%WRAPPER_JAR%\')\"^");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("\"}\"");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if \"%MVNW_VERBOSE%\" == \"true\" (");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("echo Finished downloading %WRAPPER_JAR%");
    _builder.newLine();
    _builder.append("    ");
    _builder.append(")");
    _builder.newLine();
    _builder.append(")");
    _builder.newLine();
    _builder.append("@REM End of extension");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM Provide a \"standardized\" way to retrieve the CLI args that will");
    _builder.newLine();
    _builder.append("@REM work with both Windows and non-Windows executions.");
    _builder.newLine();
    _builder.append("set MAVEN_CMD_LINE_ARGS=%*");
    _builder.newLine();
    _builder.newLine();
    _builder.append("%MAVEN_JAVA_EXE% %JVM_CONFIG_MAVEN_PROPS% %MAVEN_OPTS% %MAVEN_DEBUG_OPTS% -classpath %WRAPPER_JAR% \"-Dmaven.multiModuleProjectDirectory=%MAVEN_PROJECTBASEDIR%\" %WRAPPER_LAUNCHER% %MAVEN_CONFIG% %*");
    _builder.newLine();
    _builder.append("if ERRORLEVEL 1 goto error");
    _builder.newLine();
    _builder.append("goto end");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":error");
    _builder.newLine();
    _builder.append("set ERROR_CODE=1");
    _builder.newLine();
    _builder.newLine();
    _builder.append(":end");
    _builder.newLine();
    _builder.append("@endlocal & set ERROR_CODE=%ERROR_CODE%");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if not \"%MAVEN_SKIP_RC%\" == \"\" goto skipRcPost");
    _builder.newLine();
    _builder.append("@REM check for post script, once with legacy .bat ending and once with .cmd ending");
    _builder.newLine();
    _builder.append("if exist \"%HOME%\\mavenrc_post.bat\" call \"%HOME%\\mavenrc_post.bat\"");
    _builder.newLine();
    _builder.append("if exist \"%HOME%\\mavenrc_post.cmd\" call \"%HOME%\\mavenrc_post.cmd\"");
    _builder.newLine();
    _builder.append(":skipRcPost");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@REM pause the script if MAVEN_BATCH_PAUSE is set to \'on\'");
    _builder.newLine();
    _builder.append("if \"%MAVEN_BATCH_PAUSE%\" == \"on\" pause");
    _builder.newLine();
    _builder.newLine();
    _builder.append("if \"%MAVEN_TERMINATE_CMD%\" == \"on\" exit %ERROR_CODE%");
    _builder.newLine();
    _builder.newLine();
    _builder.append("exit /B %ERROR_CODE%");
    _builder.newLine();
    return _builder;
  }
}
