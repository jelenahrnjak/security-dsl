package org.xtext.securitydsl.generator;

import com.google.common.collect.Iterators;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import security_dsl.Application;
import security_dsl.Attribute;
import security_dsl.Authentication;
import security_dsl.Controller;
import security_dsl.Role;
import security_dsl.RoleInstance;
import security_dsl.User;

@SuppressWarnings("all")
public class SecurityDslBasicAuthenticationGenerator {
  public SecurityDslBasicAuthenticationGenerator(final Resource resource, final IFileSystemAccess2 fsa, final Application app, final String srcDestination) {
    User user = Iterators.<User>filter(resource.getAllContents(), User.class).next();
    Role role = Iterators.<Role>filter(resource.getAllContents(), Role.class).next();
    String credentialNameUser = this.getCredential(user.getModel_attributes()).getName();
    EList<Controller> _app_controllers = app.getApp_controllers();
    for (final Controller c : _app_controllers) {
      if ((c instanceof Authentication)) {
        fsa.generateFile((srcDestination + "/config/ApplicationSecurityConfig.java"), this.generateApplicationSecurityConfig(app.getPackageName(), ((Authentication)c)));
      }
    }
    fsa.generateFile((srcDestination + "/config/PasswordEncoder.java"), this.generatePassEncoder(app.getPackageName()));
    fsa.generateFile((srcDestination + "/service/IUserService.java"), this.generateIUserService(app.getPackageName()));
    fsa.generateFile((srcDestination + "/service/impl/UserServiceImpl.java"), this.generateUserServiceImpl(app.getPackageName(), credentialNameUser, this.getNotClienRoles(role.getRole_instances())));
    fsa.generateFile((srcDestination + "/model/enumeration/Role.java"), this.generateRoleEnumeration(app.getPackageName(), role.getRole_instances()));
    fsa.generateFile((srcDestination + "/exception/ResourceConflictException.java"), this.generateException(app.getPackageName()));
  }

  public String generateException(final String appMainPackage) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + appMainPackage);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".exception;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public class ResourceConflictException extends RuntimeException {");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private static final long serialVersionUID = 1791564636123821405L;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("private Long resourceId;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public ResourceConflictException(Long resourceId, String message) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("super(message);");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.setResourceId(resourceId);");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public Long getResourceId() {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("return resourceId;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("public void setResourceId(Long resourceId) {");
    _builder_1.newLine();
    _builder_1.append("\t\t");
    _builder_1.append("this.resourceId = resourceId;");
    _builder_1.newLine();
    _builder_1.append("\t");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    return content;
  }

  public String generateIUserService(final String packageName) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + packageName);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".service;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import ");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + packageName);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(".model.User;");
    _builder_2.newLine();
    _builder_2.append("import ");
    String _plus_3 = (_plus_2 + _builder_2);
    String _plus_4 = (_plus_3 + packageName);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append(".dto.UserRequestDTO;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("import java.util.List;");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("public interface IUserService {");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("User save(UserRequestDTO request);");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("List<User> findAll();");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    String content = (_plus_4 + _builder_3);
    return content;
  }

  public Attribute getCredential(final List<Attribute> attributes) {
    for (final Attribute a : attributes) {
      boolean _isCredential = a.isCredential();
      if (_isCredential) {
        return a;
      }
    }
    return null;
  }

  public String generateUserServiceImpl(final String packageName, final String credentialName, final List<RoleInstance> notClientRoles) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + packageName);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".service.impl;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import  ");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + packageName);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(".model.User;");
    _builder_2.newLine();
    _builder_2.append("import ");
    String _plus_3 = (_plus_2 + _builder_2);
    String _plus_4 = (_plus_3 + packageName);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append(".repository.UserRepository;");
    _builder_3.newLine();
    _builder_3.append("import ");
    String _plus_5 = (_plus_4 + _builder_3);
    String _plus_6 = (_plus_5 + packageName);
    StringConcatenation _builder_4 = new StringConcatenation();
    _builder_4.append(".service.IUserService;");
    _builder_4.newLine();
    _builder_4.append("import ");
    String _plus_7 = (_plus_6 + _builder_4);
    String _plus_8 = (_plus_7 + packageName);
    StringConcatenation _builder_5 = new StringConcatenation();
    _builder_5.append(".model.enumeration.Role;");
    _builder_5.newLine();
    _builder_5.append("import ");
    String _plus_9 = (_plus_8 + _builder_5);
    String _plus_10 = (_plus_9 + packageName);
    StringConcatenation _builder_6 = new StringConcatenation();
    _builder_6.append(".dto.UserRequestDTO;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("import lombok.RequiredArgsConstructor;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.beans.BeanUtils;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.core.userdetails.UserDetails;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.core.userdetails.UserDetailsService;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.core.userdetails.UsernameNotFoundException;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;");
    _builder_6.newLine();
    _builder_6.append("import org.springframework.stereotype.Service;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("import java.util.List;");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("@RequiredArgsConstructor(onConstructor = @__(@Autowired))");
    _builder_6.newLine();
    _builder_6.append("@Service");
    _builder_6.newLine();
    _builder_6.append("public class UserServiceImpl implements UserDetailsService, IUserService {");
    _builder_6.newLine();
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("private final UserRepository userRepository;");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("private final BCryptPasswordEncoder bCryptPasswordEncoder;");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.newLine();
    _builder_6.append("\t");
    _builder_6.append("@Override");
    _builder_6.newLine();
    _builder_6.append("    ");
    _builder_6.append("public User save(UserRequestDTO request) {");
    _builder_6.newLine();
    _builder_6.append("    \t");
    _builder_6.append("User newUser = new User();");
    _builder_6.newLine();
    _builder_6.append("    \t");
    _builder_6.append("BeanUtils.copyProperties(request, newUser);");
    _builder_6.newLine();
    _builder_6.append("    \t");
    _builder_6.append("newUser.setRole(Role.valueOf(request.getRole()));");
    _builder_6.newLine();
    _builder_6.append("    \t");
    _builder_6.append("if (userRepository.findBy");
    String _plus_11 = (_plus_10 + _builder_6);
    String _firstUpper = StringExtensions.toFirstUpper(credentialName);
    String _plus_12 = (_plus_11 + _firstUpper);
    StringConcatenation _builder_7 = new StringConcatenation();
    _builder_7.append("(newUser.get");
    String _plus_13 = (_plus_12 + _builder_7);
    String _firstUpper_1 = StringExtensions.toFirstUpper(credentialName);
    String _plus_14 = (_plus_13 + _firstUpper_1);
    StringConcatenation _builder_8 = new StringConcatenation();
    _builder_8.append("()).isPresent()) {");
    _builder_8.newLine();
    _builder_8.append("    \t\t");
    _builder_8.append("throw new RuntimeException(\"User already exists\");");
    _builder_8.newLine();
    _builder_8.newLine();
    _builder_8.append("    \t\t");
    _builder_8.append("}");
    _builder_8.newLine();
    _builder_8.append("    \t\t");
    _builder_8.newLine();
    _builder_8.append("\t\t");
    _builder_8.append("if(!checkRoleForRegistration(newUser.getRole())) { ");
    _builder_8.newLine();
    _builder_8.append("\t\t\t");
    _builder_8.append("throw new RuntimeException(\"Role not valid\");");
    _builder_8.newLine();
    _builder_8.append("\t\t");
    _builder_8.append("}");
    _builder_8.newLine();
    _builder_8.append("    \t");
    _builder_8.newLine();
    _builder_8.append("        ");
    _builder_8.append("String encoderPassword = bCryptPasswordEncoder.encode(newUser.getPassword());");
    _builder_8.newLine();
    _builder_8.append("        ");
    _builder_8.append("newUser.setPassword(encoderPassword);");
    _builder_8.newLine();
    _builder_8.append("    \t");
    _builder_8.append("return userRepository.saveAndFlush(newUser);");
    _builder_8.newLine();
    _builder_8.append("    ");
    _builder_8.append("}");
    _builder_8.newLine();
    _builder_8.newLine();
    _builder_8.append("\t");
    _builder_8.append("private boolean checkRoleForRegistration(Role role) {");
    _builder_8.newLine();
    _builder_8.append("\t\t");
    _builder_8.newLine();
    String content = (_plus_14 + _builder_8);
    int _size = notClientRoles.size();
    boolean _greaterThan = (_size > 0);
    if (_greaterThan) {
      String _content = content;
      StringConcatenation _builder_9 = new StringConcatenation();
      _builder_9.append("        ");
      _builder_9.append("if(");
      content = (_content + _builder_9);
      for (int i = 0; (i < notClientRoles.size()); i++) {
        {
          String _content_1 = content;
          StringConcatenation _builder_10 = new StringConcatenation();
          _builder_10.append("role.equals(Role.");
          String _upperCase = notClientRoles.get(i).getName().toUpperCase();
          String _plus_15 = (_builder_10.toString() + _upperCase);
          StringConcatenation _builder_11 = new StringConcatenation();
          _builder_11.append(")");
          String _plus_16 = (_plus_15 + _builder_11);
          content = (_content_1 + _plus_16);
          int _size_1 = notClientRoles.size();
          int _minus = (_size_1 - 1);
          boolean _equals = (i == _minus);
          if (_equals) {
            String _content_2 = content;
            content = (_content_2 + ") {");
          } else {
            String _content_3 = content;
            content = (_content_3 + " or ");
          }
        }
      }
      String _content_1 = content;
      StringConcatenation _builder_10 = new StringConcatenation();
      _builder_10.append("        ");
      _builder_10.append("return false;");
      _builder_10.newLine();
      _builder_10.newLine();
      _builder_10.append("    ");
      _builder_10.append("}");
      _builder_10.newLine();
      _builder_10.newLine();
      content = (_content_1 + _builder_10);
    }
    String _content_2 = content;
    StringConcatenation _builder_11 = new StringConcatenation();
    _builder_11.append("    \t");
    _builder_11.append("return true;");
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("}");
    _builder_11.newLine();
    _builder_11.append("\t\t\t");
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("@Override");
    _builder_11.newLine();
    _builder_11.append("    ");
    _builder_11.append("public List<User> findAll() {");
    _builder_11.newLine();
    _builder_11.append("        ");
    _builder_11.append("return userRepository.findAll();");
    _builder_11.newLine();
    _builder_11.append("\t");
    _builder_11.append("}");
    _builder_11.newLine();
    _builder_11.newLine();
    _builder_11.append("\t");
    _builder_11.append("@Override");
    _builder_11.newLine();
    _builder_11.append("\t");
    _builder_11.append("public UserDetails loadUserByUsername(String ");
    String _plus_15 = (_builder_11.toString() + credentialName);
    StringConcatenation _builder_12 = new StringConcatenation();
    _builder_12.append(") throws UsernameNotFoundException {");
    _builder_12.newLine();
    _builder_12.append("\t\t");
    _builder_12.append("return userRepository.findBy");
    String _plus_16 = (_plus_15 + _builder_12);
    String _firstUpper_2 = StringExtensions.toFirstUpper(credentialName);
    String _plus_17 = (_plus_16 + _firstUpper_2);
    StringConcatenation _builder_13 = new StringConcatenation();
    _builder_13.append("(");
    String _plus_18 = (_plus_17 + _builder_13);
    String _plus_19 = (_plus_18 + credentialName);
    StringConcatenation _builder_14 = new StringConcatenation();
    _builder_14.append(")");
    _builder_14.newLine();
    _builder_14.append("\t\t\t");
    _builder_14.append(".orElseThrow(() ->");
    _builder_14.newLine();
    _builder_14.append("\t\t\t\t");
    _builder_14.append("new UsernameNotFoundException(\"User Not Found\"));");
    _builder_14.newLine();
    _builder_14.append("\t");
    _builder_14.append("}");
    _builder_14.newLine();
    _builder_14.append("}");
    _builder_14.newLine();
    String _plus_20 = (_plus_19 + _builder_14);
    content = (_content_2 + _plus_20);
    return content;
  }

  public ArrayList<RoleInstance> getNotClienRoles(final List<RoleInstance> instances) {
    ArrayList<RoleInstance> notClients = CollectionLiterals.<RoleInstance>newArrayList();
    for (final RoleInstance ri : instances) {
      boolean _isClient = ri.isClient();
      boolean _not = (!_isClient);
      if (_not) {
        notClients.add(ri);
      }
    }
    return notClients;
  }

  public String generateApplicationSecurityConfig(final String packageName, final Authentication authController) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + packageName);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".config;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import ");
    String _plus_1 = (_plus + _builder_1);
    String _plus_2 = (_plus_1 + packageName);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append(".service.impl.UserServiceImpl;");
    _builder_2.newLine();
    _builder_2.append("import lombok.RequiredArgsConstructor;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.beans.factory.annotation.Autowired;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.context.annotation.Bean;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.context.annotation.Configuration;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.authentication.AuthenticationManager;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.authentication.dao.DaoAuthenticationProvider;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.config.annotation.web.builders.HttpSecurity;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;");
    _builder_2.newLine();
    _builder_2.append("import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("@RequiredArgsConstructor(onConstructor = @__(@Autowired))");
    _builder_2.newLine();
    _builder_2.append("@Configuration");
    _builder_2.newLine();
    _builder_2.append("@EnableWebSecurity");
    _builder_2.newLine();
    _builder_2.append("public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private final BCryptPasswordEncoder bCryptPasswordEncoder;");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("private final UserServiceImpl userService;");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("@Override");
    _builder_2.newLine();
    _builder_2.append("    ");
    _builder_2.append("protected void configure(HttpSecurity httpSecurity) throws Exception {");
    _builder_2.newLine();
    _builder_2.append("        ");
    _builder_2.append("httpSecurity.csrf().disable()");
    _builder_2.newLine();
    _builder_2.append("                ");
    _builder_2.append(".formLogin().disable()");
    _builder_2.newLine();
    _builder_2.append("                ");
    _builder_2.append(".logout().disable()");
    _builder_2.newLine();
    _builder_2.append("                ");
    _builder_2.append(".authorizeRequests().antMatchers(\"");
    String _plus_3 = (_plus_2 + _builder_2);
    String _path = authController.getPath();
    String _plus_4 = (_plus_3 + _path);
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("/**\").permitAll()");
    _builder_3.newLine();
    _builder_3.append("                ");
    _builder_3.append(".anyRequest().authenticated()");
    _builder_3.newLine();
    _builder_3.append("                ");
    _builder_3.append(".and().httpBasic();");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("@Autowired");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public void config(AuthenticationManagerBuilder authentication)");
    _builder_3.newLine();
    _builder_3.append("            ");
    _builder_3.append("throws Exception");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("{");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("authentication.authenticationProvider(daoAuthenticationProvider());");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("@Bean");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("@Override");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("public AuthenticationManager authenticationManagerBean() throws Exception {");
    _builder_3.newLine();
    _builder_3.append("\t\t");
    _builder_3.append("return super.authenticationManagerBean();");
    _builder_3.newLine();
    _builder_3.append("\t");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("@Bean");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("public DaoAuthenticationProvider daoAuthenticationProvider(){");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("DaoAuthenticationProvider provider = new DaoAuthenticationProvider();");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("provider.setPasswordEncoder(bCryptPasswordEncoder);");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("provider.setUserDetailsService(userService);");
    _builder_3.newLine();
    _builder_3.append("        ");
    _builder_3.append("return provider;");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    String content = (_plus_4 + _builder_3);
    return content;
  }

  public String generatePassEncoder(final String packageName) {
    String content = "";
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + packageName);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".config;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("import org.springframework.context.annotation.Bean;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.context.annotation.Configuration;");
    _builder_1.newLine();
    _builder_1.append("import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("@Configuration");
    _builder_1.newLine();
    _builder_1.append("public class PasswordEncoder {");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("@Bean");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("public BCryptPasswordEncoder bCryptPasswordEncoder(){");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("return new BCryptPasswordEncoder();");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("}");
    _builder_1.newLine();
    String _plus_1 = (_plus + _builder_1);
    content = _plus_1;
    return content;
  }

  public String generateRoleEnumeration(final String packageName, final List<RoleInstance> roleInstances) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _plus = (_builder.toString() + packageName);
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append(".model.enumeration;");
    _builder_1.newLine();
    _builder_1.newLine();
    _builder_1.append("public enum Role {");
    _builder_1.newLine();
    _builder_1.newLine();
    String content = (_plus + _builder_1);
    for (int i = 0; (i < roleInstances.size()); i++) {
      {
        String _content = content;
        String _upperCase = roleInstances.get(i).getName().toUpperCase();
        String _plus_1 = ("    " + _upperCase);
        content = (_content + _plus_1);
        int _size = roleInstances.size();
        int _minus = (_size - 1);
        boolean _notEquals = (i != _minus);
        if (_notEquals) {
          String _content_1 = content;
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append(",");
          _builder_2.newLine();
          content = (_content_1 + _builder_2);
        }
      }
    }
    int _size = roleInstances.size();
    boolean _notEquals = (_size != 0);
    if (_notEquals) {
      String _content = content;
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append(";");
      _builder_2.newLine();
      content = (_content + _builder_2);
    }
    String _content_1 = content;
    StringConcatenation _builder_3 = new StringConcatenation();
    _builder_3.append("    ");
    _builder_3.append("public String getAuthority() {");
    _builder_3.newLine();
    _builder_3.append("    \t");
    _builder_3.append("return this.name();");
    _builder_3.newLine();
    _builder_3.append("    ");
    _builder_3.append("}");
    _builder_3.newLine();
    _builder_3.append("}");
    _builder_3.newLine();
    content = (_content_1 + _builder_3);
    return content;
  }
}
